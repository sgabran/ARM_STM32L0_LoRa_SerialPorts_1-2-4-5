
SerialPorts_1-2-4-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004204  08004204  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800420c  0800420c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08004270  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004270  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e11a  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002682  00000000  00000000  0002e1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00030868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097e  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fdb  00000000  00000000  00031e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010efd  00000000  00000000  00046e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000806ef  00000000  00000000  00057d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002adc  00000000  00000000  000d8408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000daee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004180 	.word	0x08004180

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004180 	.word	0x08004180

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b08b      	sub	sp, #44	; 0x2c
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	2414      	movs	r4, #20
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f003 fe35 	bl	8004128 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b4e      	ldr	r3, [pc, #312]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c2:	4b4d      	ldr	r3, [pc, #308]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004c4:	2101      	movs	r1, #1
 80004c6:	430a      	orrs	r2, r1
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ca:	4b4b      	ldr	r3, [pc, #300]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ce:	2201      	movs	r2, #1
 80004d0:	4013      	ands	r3, r2
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b48      	ldr	r3, [pc, #288]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004da:	4b47      	ldr	r3, [pc, #284]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004dc:	2102      	movs	r1, #2
 80004de:	430a      	orrs	r2, r1
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	4b45      	ldr	r3, [pc, #276]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e6:	2202      	movs	r2, #2
 80004e8:	4013      	ands	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b42      	ldr	r3, [pc, #264]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004f2:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004f4:	2104      	movs	r1, #4
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004fa:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <MX_GPIO_Init+0x150>)
 80004fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fe:	2204      	movs	r2, #4
 8000500:	4013      	ands	r3, r2
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	4b3c      	ldr	r3, [pc, #240]	; (80005f8 <MX_GPIO_Init+0x150>)
 8000508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800050a:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <MX_GPIO_Init+0x150>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	430a      	orrs	r2, r1
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
 8000512:	4b39      	ldr	r3, [pc, #228]	; (80005f8 <MX_GPIO_Init+0x150>)
 8000514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin, GPIO_PIN_RESET);
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	0219      	lsls	r1, r3, #8
 8000522:	23a0      	movs	r3, #160	; 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f87b 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 800052e:	4b33      	ldr	r3, [pc, #204]	; (80005fc <MX_GPIO_Init+0x154>)
 8000530:	2200      	movs	r2, #0
 8000532:	2107      	movs	r1, #7
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f875 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2290      	movs	r2, #144	; 0x90
 800053e:	0212      	lsls	r2, r2, #8
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2202      	movs	r2, #2
 8000552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	193a      	adds	r2, r7, r4
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fee3 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0192      	lsls	r2, r2, #6
 800056a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2288      	movs	r2, #136	; 0x88
 8000570:	0352      	lsls	r2, r2, #13
 8000572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	000c      	movs	r4, r1
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800057c:	193b      	adds	r3, r7, r4
 800057e:	4a1f      	ldr	r2, [pc, #124]	; (80005fc <MX_GPIO_Init+0x154>)
 8000580:	0019      	movs	r1, r3
 8000582:	0010      	movs	r0, r2
 8000584:	f000 fed0 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2207      	movs	r2, #7
 800058c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2201      	movs	r2, #1
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2202      	movs	r2, #2
 800059e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <MX_GPIO_Init+0x154>)
 80005a4:	0019      	movs	r1, r3
 80005a6:	0010      	movs	r0, r2
 80005a8:	f000 febe 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 80005ac:	0021      	movs	r1, r4
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2203      	movs	r2, #3
 80005b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2288      	movs	r2, #136	; 0x88
 80005b8:	0352      	lsls	r2, r2, #13
 80005ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <MX_GPIO_Init+0x158>)
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f000 fead 	bl	8001328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2005      	movs	r0, #5
 80005d4:	f000 fdee 	bl	80011b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005d8:	2005      	movs	r0, #5
 80005da:	f000 fe00 	bl	80011de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2007      	movs	r0, #7
 80005e4:	f000 fde6 	bl	80011b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005e8:	2007      	movs	r0, #7
 80005ea:	f000 fdf8 	bl	80011de <HAL_NVIC_EnableIRQ>

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	; 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000
 80005fc:	50000800 	.word	0x50000800
 8000600:	50000400 	.word	0x50000400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fc94 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f850 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f7ff ff4a 	bl	80004a8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000614:	f000 f8ce 	bl	80007b4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000618:	f000 f98c 	bl	8000934 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800061c:	f000 fab4 	bl	8000b88 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000620:	f000 fa82 	bl	8000b28 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8000624:	f000 fae0 	bl	8000be8 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8000628:	f000 fb0e 	bl	8000c48 <MX_USART5_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, Test_1, 16, 300);
 800062c:	2396      	movs	r3, #150	; 0x96
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4917      	ldr	r1, [pc, #92]	; (8000690 <main+0x8c>)
 8000632:	4818      	ldr	r0, [pc, #96]	; (8000694 <main+0x90>)
 8000634:	2210      	movs	r2, #16
 8000636:	f002 fcc7 	bl	8002fc8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800063a:	23fa      	movs	r3, #250	; 0xfa
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fce8 	bl	8001014 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, Test_2, 16, 300);
 8000644:	2396      	movs	r3, #150	; 0x96
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4913      	ldr	r1, [pc, #76]	; (8000698 <main+0x94>)
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <main+0x98>)
 800064c:	2210      	movs	r2, #16
 800064e:	f002 fcbb 	bl	8002fc8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000652:	23fa      	movs	r3, #250	; 0xfa
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fcdc 	bl	8001014 <HAL_Delay>
	  HAL_UART_Transmit(&huart4, Test_4, 16, 300);
 800065c:	2396      	movs	r3, #150	; 0x96
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	490f      	ldr	r1, [pc, #60]	; (80006a0 <main+0x9c>)
 8000662:	4810      	ldr	r0, [pc, #64]	; (80006a4 <main+0xa0>)
 8000664:	2210      	movs	r2, #16
 8000666:	f002 fcaf 	bl	8002fc8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fcd0 	bl	8001014 <HAL_Delay>
	  HAL_UART_Transmit(&huart5, Test_5, 16, 300);
 8000674:	2396      	movs	r3, #150	; 0x96
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	490b      	ldr	r1, [pc, #44]	; (80006a8 <main+0xa4>)
 800067a:	480c      	ldr	r0, [pc, #48]	; (80006ac <main+0xa8>)
 800067c:	2210      	movs	r2, #16
 800067e:	f002 fca3 	bl	8002fc8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000682:	23fa      	movs	r3, #250	; 0xfa
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fcc4 	bl	8001014 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, Test_1, 16, 300);
 800068c:	e7ce      	b.n	800062c <main+0x28>
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000000 	.word	0x20000000
 8000694:	200000f4 	.word	0x200000f4
 8000698:	20000014 	.word	0x20000014
 800069c:	2000017c 	.word	0x2000017c
 80006a0:	20000028 	.word	0x20000028
 80006a4:	20000204 	.word	0x20000204
 80006a8:	2000003c 	.word	0x2000003c
 80006ac:	2000028c 	.word	0x2000028c

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b09d      	sub	sp, #116	; 0x74
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2438      	movs	r4, #56	; 0x38
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 fd31 	bl	8004128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2324      	movs	r3, #36	; 0x24
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	0018      	movs	r0, r3
 80006cc:	2314      	movs	r3, #20
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f003 fd29 	bl	8004128 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d6:	003b      	movs	r3, r7
 80006d8:	0018      	movs	r0, r3
 80006da:	2324      	movs	r3, #36	; 0x24
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f003 fd22 	bl	8004128 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemClock_Config+0xf0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a2e      	ldr	r2, [pc, #184]	; (80007a4 <SystemClock_Config+0xf4>)
 80006ea:	401a      	ands	r2, r3
 80006ec:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <SystemClock_Config+0xf0>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	0109      	lsls	r1, r1, #4
 80006f2:	430a      	orrs	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	220a      	movs	r2, #10
 80006fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2210      	movs	r2, #16
 8000708:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2202      	movs	r2, #2
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	0312      	lsls	r2, r2, #12
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	0412      	lsls	r2, r2, #16
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	187b      	adds	r3, r7, r1
 800072e:	0018      	movs	r0, r3
 8000730:	f000 ffbc 	bl	80016ac <HAL_RCC_OscConfig>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000738:	f000 f836 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	2124      	movs	r1, #36	; 0x24
 800073e:	187b      	adds	r3, r7, r1
 8000740:	220f      	movs	r2, #15
 8000742:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2203      	movs	r2, #3
 8000748:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2101      	movs	r1, #1
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fb77 	bl	8001e54 <HAL_RCC_ClockConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800076a:	f000 f81d 	bl	80007a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800076e:	003b      	movs	r3, r7
 8000770:	2223      	movs	r2, #35	; 0x23
 8000772:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000780:	003b      	movs	r3, r7
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	0292      	lsls	r2, r2, #10
 8000786:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	003b      	movs	r3, r7
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fd86 	bl	800229c <HAL_RCCEx_PeriphCLKConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000794:	f000 f808 	bl	80007a8 <Error_Handler>
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b01d      	add	sp, #116	; 0x74
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	40007000 	.word	0x40007000
 80007a4:	ffffe7ff 	.word	0xffffe7ff

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b090      	sub	sp, #64	; 0x40
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ba:	232c      	movs	r3, #44	; 0x2c
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	0018      	movs	r0, r3
 80007c0:	2314      	movs	r3, #20
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f003 fcaf 	bl	8004128 <memset>
  RTC_DateTypeDef sDate = {0};
 80007ca:	2328      	movs	r3, #40	; 0x28
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80007d2:	003b      	movs	r3, r7
 80007d4:	0018      	movs	r0, r3
 80007d6:	2328      	movs	r3, #40	; 0x28
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f003 fca4 	bl	8004128 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e0:	4b41      	ldr	r3, [pc, #260]	; (80008e8 <MX_RTC_Init+0x134>)
 80007e2:	4a42      	ldr	r2, [pc, #264]	; (80008ec <MX_RTC_Init+0x138>)
 80007e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <MX_RTC_Init+0x134>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 80007ec:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <MX_RTC_Init+0x134>)
 80007ee:	221f      	movs	r2, #31
 80007f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <MX_RTC_Init+0x134>)
 80007f4:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <MX_RTC_Init+0x13c>)
 80007f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_RTC_Init+0x134>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007fe:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <MX_RTC_Init+0x134>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000804:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_RTC_Init+0x134>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <MX_RTC_Init+0x134>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_RTC_Init+0x134>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fe9e 	bl	8002554 <HAL_RTC_Init>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800081c:	f7ff ffc4 	bl	80007a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000820:	212c      	movs	r1, #44	; 0x2c
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000840:	1879      	adds	r1, r7, r1
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_RTC_Init+0x134>)
 8000844:	2200      	movs	r2, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f001 ff20 	bl	800268c <HAL_RTC_SetTime>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000850:	f7ff ffaa 	bl	80007a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000854:	2128      	movs	r1, #40	; 0x28
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2201      	movs	r2, #1
 8000866:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800086e:	1879      	adds	r1, r7, r1
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_RTC_Init+0x134>)
 8000872:	2200      	movs	r2, #0
 8000874:	0018      	movs	r0, r3
 8000876:	f001 ffb3 	bl	80027e0 <HAL_RTC_SetDate>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800087e:	f7ff ff93 	bl	80007a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000882:	003b      	movs	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000888:	003b      	movs	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80008ac:	003b      	movs	r3, r7
 80008ae:	22f0      	movs	r2, #240	; 0xf0
 80008b0:	0512      	lsls	r2, r2, #20
 80008b2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80008ba:	003b      	movs	r3, r7
 80008bc:	2220      	movs	r2, #32
 80008be:	2101      	movs	r1, #1
 80008c0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80008ca:	0039      	movs	r1, r7
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_RTC_Init+0x134>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 f819 	bl	8002908 <HAL_RTC_SetAlarm_IT>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80008da:	f7ff ff65 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b010      	add	sp, #64	; 0x40
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000078 	.word	0x20000078
 80008ec:	40002800 	.word	0x40002800
 80008f0:	000003ff 	.word	0x000003ff

080008f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_RTC_MspInit+0x38>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10e      	bne.n	8000924 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_RTC_MspInit+0x3c>)
 8000908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_RTC_MspInit+0x3c>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	02c9      	lsls	r1, r1, #11
 8000910:	430a      	orrs	r2, r1
 8000912:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2002      	movs	r0, #2
 800091a:	f000 fc4b 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800091e:	2002      	movs	r0, #2
 8000920:	f000 fc5d 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40002800 	.word	0x40002800
 8000930:	40021000 	.word	0x40021000

08000934 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI1_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_SPI1_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x68>)
 8000940:	2282      	movs	r2, #130	; 0x82
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_SPI1_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI1_Init+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_SPI1_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x68>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_SPI1_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI1_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x68>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI1_Init+0x68>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x68>)
 8000980:	2207      	movs	r2, #7
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_SPI1_Init+0x68>)
 8000986:	0018      	movs	r0, r3
 8000988:	f002 fa36 	bl	8002df8 <HAL_SPI_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000990:	f7ff ff0a 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	2000009c 	.word	0x2000009c
 80009a0:	40013000 	.word	0x40013000

080009a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	240c      	movs	r4, #12
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	2314      	movs	r3, #20
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f003 fbb6 	bl	8004128 <memset>
  if(spiHandle->Instance==SPI1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <HAL_SPI_MspInit+0x80>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d129      	bne.n	8000a1a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_SPI_MspInit+0x84>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_SPI_MspInit+0x84>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	0149      	lsls	r1, r1, #5
 80009d0:	430a      	orrs	r2, r1
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_SPI_MspInit+0x84>)
 80009d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_SPI_MspInit+0x84>)
 80009da:	2101      	movs	r1, #1
 80009dc:	430a      	orrs	r2, r1
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_SPI_MspInit+0x84>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e4:	2201      	movs	r2, #1
 80009e6:	4013      	ands	r3, r2
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin|GPIO_PIN_5;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	22e0      	movs	r2, #224	; 0xe0
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2203      	movs	r2, #3
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	187a      	adds	r2, r7, r1
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fc87 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b009      	add	sp, #36	; 0x24
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	40013000 	.word	0x40013000
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_MspInit+0x24>)
 8000a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x24>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_MspInit+0x24>)
 8000a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_MspInit+0x24>)
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	0549      	lsls	r1, r1, #21
 8000a46:	430a      	orrs	r2, r1
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 fab0 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <RTC_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 f89e 	bl	8002bcc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000078 	.word	0x20000078

08000a9c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 fddd 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f000 fdda 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fdd0 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <USART4_5_IRQHandler+0x1c>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f002 fb1a 	bl	8003108 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <USART4_5_IRQHandler+0x20>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 fb16 	bl	8003108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	20000204 	.word	0x20000204
 8000ae8:	2000028c 	.word	0x2000028c

08000aec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <USART1_IRQHandler+0x14>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f002 fb08 	bl	8003108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	200000f4 	.word	0x200000f4

08000b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <USART2_IRQHandler+0x14>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 fafc 	bl	8003108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	2000017c 	.word	0x2000017c

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart5;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b34:	22e1      	movs	r2, #225	; 0xe1
 8000b36:	0252      	lsls	r2, r2, #9
 8000b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <MX_USART1_UART_Init+0x58>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f002 f9d7 	bl	8002f20 <HAL_UART_Init>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b76:	f7ff fe17 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000f4 	.word	0x200000f4
 8000b84:	40013800 	.word	0x40013800

08000b88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_USART2_UART_Init+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b94:	22e1      	movs	r2, #225	; 0xe1
 8000b96:	0252      	lsls	r2, r2, #9
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f002 f9a7 	bl	8002f20 <HAL_UART_Init>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f7ff fde7 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000017c 	.word	0x2000017c
 8000be4:	40004400 	.word	0x40004400

08000be8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_USART4_UART_Init+0x5c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000bf4:	22e1      	movs	r2, #225	; 0xe1
 8000bf6:	0252      	lsls	r2, r2, #9
 8000bf8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MX_USART4_UART_Init+0x58>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f002 f977 	bl	8002f20 <HAL_UART_Init>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000c36:	f7ff fdb7 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000204 	.word	0x20000204
 8000c44:	40004c00 	.word	0x40004c00

08000c48 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_USART5_UART_Init+0x5c>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c54:	22e1      	movs	r2, #225	; 0xe1
 8000c56:	0252      	lsls	r2, r2, #9
 8000c58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <MX_USART5_UART_Init+0x58>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f002 f947 	bl	8002f20 <HAL_UART_Init>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8000c96:	f7ff fd87 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000028c 	.word	0x2000028c
 8000ca4:	40005000 	.word	0x40005000

08000ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b08d      	sub	sp, #52	; 0x34
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	241c      	movs	r4, #28
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	2314      	movs	r3, #20
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f003 fa34 	bl	8004128 <memset>
  if(uartHandle->Instance==USART1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a80      	ldr	r2, [pc, #512]	; (8000ec8 <HAL_UART_MspInit+0x220>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d154      	bne.n	8000d74 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cca:	4b80      	ldr	r3, [pc, #512]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cce:	4b7f      	ldr	r3, [pc, #508]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	01c9      	lsls	r1, r1, #7
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b7c      	ldr	r3, [pc, #496]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cdc:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000cde:	2102      	movs	r1, #2
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ce4:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b76      	ldr	r3, [pc, #472]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf4:	4b75      	ldr	r3, [pc, #468]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cfc:	4b73      	ldr	r3, [pc, #460]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	2201      	movs	r2, #1
 8000d02:	4013      	ands	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2202      	movs	r2, #2
 8000d12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	4a69      	ldr	r2, [pc, #420]	; (8000ed0 <HAL_UART_MspInit+0x228>)
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	0010      	movs	r0, r2
 8000d2e:	f000 fafb 	bl	8001328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d32:	0021      	movs	r1, r4
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	00d2      	lsls	r2, r2, #3
 8000d3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2202      	movs	r2, #2
 8000d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2204      	movs	r2, #4
 8000d52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	187a      	adds	r2, r7, r1
 8000d56:	23a0      	movs	r3, #160	; 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 fae3 	bl	8001328 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	201b      	movs	r0, #27
 8000d68:	f000 fa24 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6c:	201b      	movs	r0, #27
 8000d6e:	f000 fa36 	bl	80011de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8000d72:	e0a5      	b.n	8000ec0 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a56      	ldr	r2, [pc, #344]	; (8000ed4 <HAL_UART_MspInit+0x22c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d132      	bne.n	8000de4 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7e:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0289      	lsls	r1, r1, #10
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	430a      	orrs	r2, r1
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d98:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000da4:	211c      	movs	r1, #28
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	220c      	movs	r2, #12
 8000daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2202      	movs	r2, #2
 8000db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	187a      	adds	r2, r7, r1
 8000dc6:	23a0      	movs	r3, #160	; 0xa0
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 faab 	bl	8001328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f000 f9ec 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ddc:	201c      	movs	r0, #28
 8000dde:	f000 f9fe 	bl	80011de <HAL_NVIC_EnableIRQ>
}
 8000de2:	e06d      	b.n	8000ec0 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART4)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a3b      	ldr	r2, [pc, #236]	; (8000ed8 <HAL_UART_MspInit+0x230>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d132      	bne.n	8000e54 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000dee:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0309      	lsls	r1, r1, #12
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000e14:	211c      	movs	r1, #28
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2202      	movs	r2, #2
 8000e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2206      	movs	r2, #6
 8000e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	187a      	adds	r2, r7, r1
 8000e36:	23a0      	movs	r3, #160	; 0xa0
 8000e38:	05db      	lsls	r3, r3, #23
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 fa73 	bl	8001328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	200e      	movs	r0, #14
 8000e48:	f000 f9b4 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8000e4c:	200e      	movs	r0, #14
 8000e4e:	f000 f9c6 	bl	80011de <HAL_NVIC_EnableIRQ>
}
 8000e52:	e035      	b.n	8000ec0 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART5)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_UART_MspInit+0x234>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0349      	lsls	r1, r1, #13
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000e72:	2102      	movs	r1, #2
 8000e74:	430a      	orrs	r2, r1
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_UART_MspInit+0x224>)
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000e84:	211c      	movs	r1, #28
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2218      	movs	r2, #24
 8000e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2206      	movs	r2, #6
 8000ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_UART_MspInit+0x228>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f000 fa3c 	bl	8001328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	200e      	movs	r0, #14
 8000eb6:	f000 f97d 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8000eba:	200e      	movs	r0, #14
 8000ebc:	f000 f98f 	bl	80011de <HAL_NVIC_EnableIRQ>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b00d      	add	sp, #52	; 0x34
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	50000400 	.word	0x50000400
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	40004c00 	.word	0x40004c00
 8000edc:	40005000 	.word	0x40005000

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee4:	f7ff fe1a 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f003 f913 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fb77 	bl	8000604 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
   ldr   r0, =_estack
 8000f18:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f24:	08004214 	.word	0x08004214
  ldr r2, =_sbss
 8000f28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f2c:	20000318 	.word	0x20000318

08000f30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_COMP_IRQHandler>
	...

08000f34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x3c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Init+0x3c>)
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 f811 	bl	8000f74 <HAL_InitTick>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e001      	b.n	8000f62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5e:	f7ff fd65 	bl	8000a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000f7e:	681c      	ldr	r4, [r3, #0]
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_InitTick+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	0019      	movs	r1, r3
 8000f86:	23fa      	movs	r3, #250	; 0xfa
 8000f88:	0098      	lsls	r0, r3, #2
 8000f8a:	f7ff f8bd 	bl	8000108 <__udivsi3>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0019      	movs	r1, r3
 8000f92:	0020      	movs	r0, r4
 8000f94:	f7ff f8b8 	bl	8000108 <__udivsi3>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 f92f 	bl	80011fe <HAL_SYSTICK_Config>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e00f      	b.n	8000fc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d80b      	bhi.n	8000fc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f8fc 	bl	80011b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_InitTick+0x64>)
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b003      	add	sp, #12
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	20000050 	.word	0x20000050
 8000fd4:	20000058 	.word	0x20000058
 8000fd8:	20000054 	.word	0x20000054

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x1c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	18d2      	adds	r2, r2, r3
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_IncTick+0x20>)
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	20000058 	.word	0x20000058
 8000ffc:	20000314 	.word	0x20000314

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <HAL_GetTick+0x10>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	20000314 	.word	0x20000314

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff fff0 	bl	8001000 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	001a      	movs	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	189b      	adds	r3, r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	f7ff ffe0 	bl	8001000 <HAL_GetTick>
 8001040:	0002      	movs	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000058 	.word	0x20000058

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	0002      	movs	r2, r0
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b7f      	cmp	r3, #127	; 0x7f
 800106e:	d809      	bhi.n	8001084 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	001a      	movs	r2, r3
 8001076:	231f      	movs	r3, #31
 8001078:	401a      	ands	r2, r3
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_EnableIRQ+0x30>)
 800107c:	2101      	movs	r1, #1
 800107e:	4091      	lsls	r1, r2
 8001080:	000a      	movs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
  }
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	0002      	movs	r2, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b7f      	cmp	r3, #127	; 0x7f
 80010a4:	d828      	bhi.n	80010f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a6:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <__NVIC_SetPriority+0xd4>)
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	33c0      	adds	r3, #192	; 0xc0
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	589b      	ldr	r3, [r3, r2]
 80010b6:	1dfa      	adds	r2, r7, #7
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	0011      	movs	r1, r2
 80010bc:	2203      	movs	r2, #3
 80010be:	400a      	ands	r2, r1
 80010c0:	00d2      	lsls	r2, r2, #3
 80010c2:	21ff      	movs	r1, #255	; 0xff
 80010c4:	4091      	lsls	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	43d2      	mvns	r2, r2
 80010ca:	401a      	ands	r2, r3
 80010cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	401a      	ands	r2, r3
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	2303      	movs	r3, #3
 80010de:	4003      	ands	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	481f      	ldr	r0, [pc, #124]	; (8001164 <__NVIC_SetPriority+0xd4>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	430a      	orrs	r2, r1
 80010f0:	33c0      	adds	r3, #192	; 0xc0
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010f6:	e031      	b.n	800115c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <__NVIC_SetPriority+0xd8>)
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	0019      	movs	r1, r3
 8001100:	230f      	movs	r3, #15
 8001102:	400b      	ands	r3, r1
 8001104:	3b08      	subs	r3, #8
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3306      	adds	r3, #6
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	18d3      	adds	r3, r2, r3
 800110e:	3304      	adds	r3, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1dfa      	adds	r2, r7, #7
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	0011      	movs	r1, r2
 8001118:	2203      	movs	r2, #3
 800111a:	400a      	ands	r2, r1
 800111c:	00d2      	lsls	r2, r2, #3
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	43d2      	mvns	r2, r2
 8001126:	401a      	ands	r2, r3
 8001128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	401a      	ands	r2, r3
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	2303      	movs	r3, #3
 800113a:	4003      	ands	r3, r0
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <__NVIC_SetPriority+0xd8>)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	001c      	movs	r4, r3
 8001148:	230f      	movs	r3, #15
 800114a:	4023      	ands	r3, r4
 800114c:	3b08      	subs	r3, #8
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	430a      	orrs	r2, r1
 8001152:	3306      	adds	r3, #6
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	18c3      	adds	r3, r0, r3
 8001158:	3304      	adds	r3, #4
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b003      	add	sp, #12
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	045b      	lsls	r3, r3, #17
 800117c:	429a      	cmp	r2, r3
 800117e:	d301      	bcc.n	8001184 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001180:	2301      	movs	r3, #1
 8001182:	e010      	b.n	80011a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <SysTick_Config+0x44>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	3a01      	subs	r2, #1
 800118a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118c:	2301      	movs	r3, #1
 800118e:	425b      	negs	r3, r3
 8001190:	2103      	movs	r1, #3
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff ff7c 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SysTick_Config+0x44>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SysTick_Config+0x44>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b002      	add	sp, #8
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	210f      	movs	r1, #15
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	1c02      	adds	r2, r0, #0
 80011c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	0002      	movs	r2, r0
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff33 	bl	800105c <__NVIC_EnableIRQ>
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ffaf 	bl	800116c <SysTick_Config>
 800120e:	0003      	movs	r3, r0
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001220:	230f      	movs	r3, #15
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2225      	movs	r2, #37	; 0x25
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d008      	beq.n	8001246 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2204      	movs	r2, #4
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2224      	movs	r2, #36	; 0x24
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e024      	b.n	8001290 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	210e      	movs	r1, #14
 8001252:	438a      	bics	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	438a      	bics	r2, r1
 8001264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	221c      	movs	r2, #28
 800126c:	401a      	ands	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2101      	movs	r1, #1
 8001274:	4091      	lsls	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2225      	movs	r2, #37	; 0x25
 800127e:	2101      	movs	r1, #1
 8001280:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2224      	movs	r2, #36	; 0x24
 8001286:	2100      	movs	r1, #0
 8001288:	5499      	strb	r1, [r3, r2]

    return status;
 800128a:	230f      	movs	r3, #15
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a0:	210f      	movs	r1, #15
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2225      	movs	r2, #37	; 0x25
 80012ac:	5c9b      	ldrb	r3, [r3, r2]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d006      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e02a      	b.n	8001318 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	210e      	movs	r1, #14
 80012ce:	438a      	bics	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	438a      	bics	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	221c      	movs	r2, #28
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	2101      	movs	r1, #1
 80012f0:	4091      	lsls	r1, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2225      	movs	r2, #37	; 0x25
 80012fa:	2101      	movs	r1, #1
 80012fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2224      	movs	r2, #36	; 0x24
 8001302:	2100      	movs	r1, #0
 8001304:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	0010      	movs	r0, r2
 8001316:	4798      	blx	r3
    }
  }
  return status;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	781b      	ldrb	r3, [r3, #0]
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b004      	add	sp, #16
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800133e:	e155      	b.n	80015ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4091      	lsls	r1, r2
 800134a:	000a      	movs	r2, r1
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d100      	bne.n	8001358 <HAL_GPIO_Init+0x30>
 8001356:	e146      	b.n	80015e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2203      	movs	r2, #3
 800135e:	4013      	ands	r3, r2
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2203      	movs	r2, #3
 800136a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	409a      	lsls	r2, r3
 800137e:	0013      	movs	r3, r2
 8001380:	43da      	mvns	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	2201      	movs	r2, #1
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	4013      	ands	r3, r2
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d017      	beq.n	800140e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2203      	movs	r2, #3
 8001414:	4013      	ands	r3, r2
 8001416:	2b02      	cmp	r3, #2
 8001418:	d123      	bne.n	8001462 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	58d3      	ldr	r3, [r2, r3]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2207      	movs	r2, #7
 800142c:	4013      	ands	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2107      	movs	r1, #7
 8001446:	400b      	ands	r3, r1
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	6939      	ldr	r1, [r7, #16]
 8001460:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	401a      	ands	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	23c0      	movs	r3, #192	; 0xc0
 800149c:	029b      	lsls	r3, r3, #10
 800149e:	4013      	ands	r3, r2
 80014a0:	d100      	bne.n	80014a4 <HAL_GPIO_Init+0x17c>
 80014a2:	e0a0      	b.n	80015e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a4:	4b57      	ldr	r3, [pc, #348]	; (8001604 <HAL_GPIO_Init+0x2dc>)
 80014a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_GPIO_Init+0x2dc>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b0:	4a55      	ldr	r2, [pc, #340]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	589b      	ldr	r3, [r3, r2]
 80014bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2203      	movs	r2, #3
 80014c2:	4013      	ands	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	409a      	lsls	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	43da      	mvns	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	05db      	lsls	r3, r3, #23
 80014da:	429a      	cmp	r2, r3
 80014dc:	d01f      	beq.n	800151e <HAL_GPIO_Init+0x1f6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4a      	ldr	r2, [pc, #296]	; (800160c <HAL_GPIO_Init+0x2e4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x1f2>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a49      	ldr	r2, [pc, #292]	; (8001610 <HAL_GPIO_Init+0x2e8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x1ee>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a48      	ldr	r2, [pc, #288]	; (8001614 <HAL_GPIO_Init+0x2ec>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x1ea>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_GPIO_Init+0x2f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x1e6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_GPIO_Init+0x2f4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x1e2>
 8001506:	2305      	movs	r3, #5
 8001508:	e00a      	b.n	8001520 <HAL_GPIO_Init+0x1f8>
 800150a:	2306      	movs	r3, #6
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x1f8>
 800150e:	2304      	movs	r3, #4
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x1f8>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x1f8>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x1f8>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x1f8>
 800151e:	2300      	movs	r3, #0
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	2103      	movs	r1, #3
 8001524:	400a      	ands	r2, r1
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001530:	4935      	ldr	r1, [pc, #212]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153e:	4b38      	ldr	r3, [pc, #224]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43da      	mvns	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	035b      	lsls	r3, r3, #13
 8001556:	4013      	ands	r3, r2
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43da      	mvns	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	039b      	lsls	r3, r3, #14
 8001580:	4013      	ands	r3, r2
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43da      	mvns	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	4013      	ands	r3, r2
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	40da      	lsrs	r2, r3
 80015f4:	1e13      	subs	r3, r2, #0
 80015f6:	d000      	beq.n	80015fa <HAL_GPIO_Init+0x2d2>
 80015f8:	e6a2      	b.n	8001340 <HAL_GPIO_Init+0x18>
  }
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b006      	add	sp, #24
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	50000400 	.word	0x50000400
 8001610:	50000800 	.word	0x50000800
 8001614:	50000c00 	.word	0x50000c00
 8001618:	50001000 	.word	0x50001000
 800161c:	50001c00 	.word	0x50001c00
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	0008      	movs	r0, r1
 800162e:	0011      	movs	r1, r2
 8001630:	1cbb      	adds	r3, r7, #2
 8001632:	1c02      	adds	r2, r0, #0
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	1c7b      	adds	r3, r7, #1
 8001638:	1c0a      	adds	r2, r1, #0
 800163a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163c:	1c7b      	adds	r3, r7, #1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001644:	1cbb      	adds	r3, r7, #2
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800164e:	1cbb      	adds	r3, r7, #2
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	1dba      	adds	r2, r7, #6
 8001672:	8812      	ldrh	r2, [r2, #0]
 8001674:	4013      	ands	r3, r2
 8001676:	d008      	beq.n	800168a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800167a:	1dba      	adds	r2, r7, #6
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001680:	1dbb      	adds	r3, r7, #6
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	0018      	movs	r0, r3
 8001686:	f000 f807 	bl	8001698 <HAL_GPIO_EXTI_Callback>
  }
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	0002      	movs	r2, r0
 80016a0:	1dbb      	adds	r3, r7, #6
 80016a2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f000 fbbf 	bl	8001e3e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c0:	4bc9      	ldr	r3, [pc, #804]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	220c      	movs	r2, #12
 80016c6:	4013      	ands	r3, r2
 80016c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ca:	4bc7      	ldr	r3, [pc, #796]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	025b      	lsls	r3, r3, #9
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	d100      	bne.n	80016e2 <HAL_RCC_OscConfig+0x36>
 80016e0:	e07e      	b.n	80017e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d007      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d112      	bne.n	8001714 <HAL_RCC_OscConfig+0x68>
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10d      	bne.n	8001714 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	4bbb      	ldr	r3, [pc, #748]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	029b      	lsls	r3, r3, #10
 8001700:	4013      	ands	r3, r2
 8001702:	d100      	bne.n	8001706 <HAL_RCC_OscConfig+0x5a>
 8001704:	e06b      	b.n	80017de <HAL_RCC_OscConfig+0x132>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d167      	bne.n	80017de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	f000 fb95 	bl	8001e3e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x84>
 8001720:	4bb1      	ldr	r3, [pc, #708]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0249      	lsls	r1, r1, #9
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e027      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	23a0      	movs	r3, #160	; 0xa0
 8001736:	02db      	lsls	r3, r3, #11
 8001738:	429a      	cmp	r2, r3
 800173a:	d10e      	bne.n	800175a <HAL_RCC_OscConfig+0xae>
 800173c:	4baa      	ldr	r3, [pc, #680]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4ba9      	ldr	r3, [pc, #676]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	02c9      	lsls	r1, r1, #11
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4ba7      	ldr	r3, [pc, #668]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0249      	lsls	r1, r1, #9
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e012      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 800175a:	4ba3      	ldr	r3, [pc, #652]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001760:	49a2      	ldr	r1, [pc, #648]	; (80019ec <HAL_RCC_OscConfig+0x340>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	4ba0      	ldr	r3, [pc, #640]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	4013      	ands	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4b9c      	ldr	r3, [pc, #624]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b9b      	ldr	r3, [pc, #620]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800177a:	499d      	ldr	r1, [pc, #628]	; (80019f0 <HAL_RCC_OscConfig+0x344>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d015      	beq.n	80017b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fc3a 	bl	8001000 <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001792:	f7ff fc35 	bl	8001000 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b64      	cmp	r3, #100	; 0x64
 800179e:	d902      	bls.n	80017a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f000 fb4c 	bl	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017a6:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	029b      	lsls	r3, r3, #10
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0ef      	beq.n	8001792 <HAL_RCC_OscConfig+0xe6>
 80017b2:	e015      	b.n	80017e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fc24 	bl	8001000 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017be:	f7ff fc1f 	bl	8001000 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b64      	cmp	r3, #100	; 0x64
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e336      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017d0:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	029b      	lsls	r3, r3, #10
 80017d8:	4013      	ands	r3, r2
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x112>
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d100      	bne.n	80017ec <HAL_RCC_OscConfig+0x140>
 80017ea:	e099      	b.n	8001920 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	2220      	movs	r2, #32
 80017f6:	4013      	ands	r3, r2
 80017f8:	d009      	beq.n	800180e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80017fa:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001800:	2120      	movs	r1, #32
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	2220      	movs	r2, #32
 800180a:	4393      	bics	r3, r2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0c      	cmp	r3, #12
 8001818:	d13e      	bne.n	8001898 <HAL_RCC_OscConfig+0x1ec>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d13b      	bne.n	8001898 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001820:	4b71      	ldr	r3, [pc, #452]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2204      	movs	r2, #4
 8001826:	4013      	ands	r3, r2
 8001828:	d004      	beq.n	8001834 <HAL_RCC_OscConfig+0x188>
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e304      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b6c      	ldr	r3, [pc, #432]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x348>)
 800183a:	4013      	ands	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	021a      	lsls	r2, r3, #8
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2209      	movs	r2, #9
 8001850:	4393      	bics	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185c:	f000 fc42 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8001860:	0001      	movs	r1, r0
 8001862:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	220f      	movs	r2, #15
 800186a:	4013      	ands	r3, r2
 800186c:	4a62      	ldr	r2, [pc, #392]	; (80019f8 <HAL_RCC_OscConfig+0x34c>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	000a      	movs	r2, r1
 8001872:	40da      	lsrs	r2, r3
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_RCC_OscConfig+0x350>)
 8001876:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001878:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_RCC_OscConfig+0x354>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2513      	movs	r5, #19
 800187e:	197c      	adds	r4, r7, r5
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff fb77 	bl	8000f74 <HAL_InitTick>
 8001886:	0003      	movs	r3, r0
 8001888:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800188a:	197b      	adds	r3, r7, r5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d046      	beq.n	8001920 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001892:	197b      	adds	r3, r7, r5
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	e2d2      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	2b00      	cmp	r3, #0
 800189c:	d027      	beq.n	80018ee <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2209      	movs	r2, #9
 80018a4:	4393      	bics	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fba6 	bl	8001000 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fba1 	bl	8001000 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e2b8      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018cc:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2204      	movs	r2, #4
 80018d2:	4013      	ands	r3, r2
 80018d4:	d0f1      	beq.n	80018ba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a46      	ldr	r2, [pc, #280]	; (80019f4 <HAL_RCC_OscConfig+0x348>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	021a      	lsls	r2, r3, #8
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	438a      	bics	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb81 	bl	8001000 <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fb7c 	bl	8001000 <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e293      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2204      	movs	r2, #4
 800191c:	4013      	ands	r3, r2
 800191e:	d1f1      	bne.n	8001904 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2210      	movs	r2, #16
 8001926:	4013      	ands	r3, r2
 8001928:	d100      	bne.n	800192c <HAL_RCC_OscConfig+0x280>
 800192a:	e0a2      	b.n	8001a72 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d140      	bne.n	80019b4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x29e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e279      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_RCC_OscConfig+0x358>)
 8001950:	4013      	ands	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	0a19      	lsrs	r1, r3, #8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	061a      	lsls	r2, r3, #24
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	0b5b      	lsrs	r3, r3, #13
 8001978:	3301      	adds	r3, #1
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	0212      	lsls	r2, r2, #8
 800197e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	210f      	movs	r1, #15
 8001988:	400b      	ands	r3, r1
 800198a:	491b      	ldr	r1, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x34c>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_RCC_OscConfig+0x350>)
 8001992:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_RCC_OscConfig+0x354>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2513      	movs	r5, #19
 800199a:	197c      	adds	r4, r7, r5
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fae9 	bl	8000f74 <HAL_InitTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80019a6:	197b      	adds	r3, r7, r5
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d061      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80019ae:	197b      	adds	r3, r7, r5
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	e244      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d040      	beq.n	8001a3e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	0049      	lsls	r1, r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb19 	bl	8001000 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019d2:	e019      	b.n	8001a08 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d4:	f7ff fb14 	bl	8001000 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d912      	bls.n	8001a08 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e22b      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000
 80019ec:	fffeffff 	.word	0xfffeffff
 80019f0:	fffbffff 	.word	0xfffbffff
 80019f4:	ffffe0ff 	.word	0xffffe0ff
 80019f8:	08004198 	.word	0x08004198
 80019fc:	20000050 	.word	0x20000050
 8001a00:	20000054 	.word	0x20000054
 8001a04:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a08:	4bca      	ldr	r3, [pc, #808]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0df      	beq.n	80019d4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a14:	4bc7      	ldr	r3, [pc, #796]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4ac7      	ldr	r2, [pc, #796]	; (8001d38 <HAL_RCC_OscConfig+0x68c>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a22:	4bc4      	ldr	r3, [pc, #784]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a28:	4bc2      	ldr	r3, [pc, #776]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	0a19      	lsrs	r1, r3, #8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	061a      	lsls	r2, r3, #24
 8001a36:	4bbf      	ldr	r3, [pc, #764]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	e019      	b.n	8001a72 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a3e:	4bbd      	ldr	r3, [pc, #756]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4bbc      	ldr	r3, [pc, #752]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a44:	49bd      	ldr	r1, [pc, #756]	; (8001d3c <HAL_RCC_OscConfig+0x690>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fad9 	bl	8001000 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a54:	f7ff fad4 	bl	8001000 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1eb      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a66:	4bb3      	ldr	r3, [pc, #716]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2208      	movs	r2, #8
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d036      	beq.n	8001aea <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d019      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a84:	4bab      	ldr	r3, [pc, #684]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a88:	4baa      	ldr	r3, [pc, #680]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fab6 	bl	8001000 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fab1 	bl	8001000 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1c8      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aac:	4ba1      	ldr	r3, [pc, #644]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d0f1      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3ee>
 8001ab6:	e018      	b.n	8001aea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b9e      	ldr	r3, [pc, #632]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001abc:	4b9d      	ldr	r3, [pc, #628]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa9c 	bl	8001000 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff fa97 	bl	8001000 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1ae      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ae0:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d1f1      	bne.n	8001ace <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2204      	movs	r2, #4
 8001af0:	4013      	ands	r3, r2
 8001af2:	d100      	bne.n	8001af6 <HAL_RCC_OscConfig+0x44a>
 8001af4:	e0ae      	b.n	8001c54 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af6:	2023      	movs	r0, #35	; 0x23
 8001af8:	183b      	adds	r3, r7, r0
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b8d      	ldr	r3, [pc, #564]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	055b      	lsls	r3, r3, #21
 8001b06:	4013      	ands	r3, r2
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0549      	lsls	r1, r1, #21
 8001b14:	430a      	orrs	r2, r1
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_OscConfig+0x694>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <HAL_RCC_OscConfig+0x694>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b84      	ldr	r3, [pc, #528]	; (8001d40 <HAL_RCC_OscConfig+0x694>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0049      	lsls	r1, r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa62 	bl	8001000 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7ff fa5d 	bl	8001000 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e174      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b7a      	ldr	r3, [pc, #488]	; (8001d40 <HAL_RCC_OscConfig+0x694>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4d0>
 8001b6c:	4b71      	ldr	r3, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b70:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0049      	lsls	r1, r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	651a      	str	r2, [r3, #80]	; 0x50
 8001b7a:	e031      	b.n	8001be0 <HAL_RCC_OscConfig+0x534>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4f2>
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b8a:	496c      	ldr	r1, [pc, #432]	; (8001d3c <HAL_RCC_OscConfig+0x690>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b94:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001b96:	496b      	ldr	r1, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x698>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b9c:	e020      	b.n	8001be0 <HAL_RCC_OscConfig+0x534>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	23a0      	movs	r3, #160	; 0xa0
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x51c>
 8001baa:	4b62      	ldr	r3, [pc, #392]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bae:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	00c9      	lsls	r1, r1, #3
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	651a      	str	r2, [r3, #80]	; 0x50
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bbc:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bbe:	2180      	movs	r1, #128	; 0x80
 8001bc0:	0049      	lsls	r1, r1, #1
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x534>
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bce:	495b      	ldr	r1, [pc, #364]	; (8001d3c <HAL_RCC_OscConfig+0x690>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	651a      	str	r2, [r3, #80]	; 0x50
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd8:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001bda:	495a      	ldr	r1, [pc, #360]	; (8001d44 <HAL_RCC_OscConfig+0x698>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fa0a 	bl	8001000 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bf0:	e009      	b.n	8001c06 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fa05 	bl	8001000 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_RCC_OscConfig+0x69c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e11b      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c06:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d0ef      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x546>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7ff f9f4 	bl	8001000 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff f9ef 	bl	8001000 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x69c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e105      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c32:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d1ef      	bne.n	8001c1e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c3e:	2323      	movs	r3, #35	; 0x23
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c48:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c4e:	493f      	ldr	r1, [pc, #252]	; (8001d4c <HAL_RCC_OscConfig+0x6a0>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d049      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d026      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c66:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x6a4>)
 8001c80:	6a1a      	ldr	r2, [r3, #32]
 8001c82:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x6a4>)
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0189      	lsls	r1, r1, #6
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f9b8 	bl	8001000 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c96:	f7ff f9b3 	bl	8001000 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0ca      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f1      	beq.n	8001c96 <HAL_RCC_OscConfig+0x5ea>
 8001cb2:	e01e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCC_OscConfig+0x6a4>)
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_RCC_OscConfig+0x6a4>)
 8001cc6:	4923      	ldr	r1, [pc, #140]	; (8001d54 <HAL_RCC_OscConfig+0x6a8>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f998 	bl	8001000 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd6:	f7ff f993 	bl	8001000 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0aa      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d1f1      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d100      	bne.n	8001cfc <HAL_RCC_OscConfig+0x650>
 8001cfa:	e09f      	b.n	8001e3c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d100      	bne.n	8001d04 <HAL_RCC_OscConfig+0x658>
 8001d02:	e078      	b.n	8001df6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d159      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCC_OscConfig+0x688>)
 8001d12:	4911      	ldr	r1, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x6ac>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f972 	bl	8001000 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff f96d 	bl	8001000 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d915      	bls.n	8001d5c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e084      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	ffff1fff 	.word	0xffff1fff
 8001d3c:	fffffeff 	.word	0xfffffeff
 8001d40:	40007000 	.word	0x40007000
 8001d44:	fffffbff 	.word	0xfffffbff
 8001d48:	00001388 	.word	0x00001388
 8001d4c:	efffffff 	.word	0xefffffff
 8001d50:	40010000 	.word	0x40010000
 8001d54:	ffffdfff 	.word	0xffffdfff
 8001d58:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	049b      	lsls	r3, r3, #18
 8001d64:	4013      	ands	r3, r2
 8001d66:	d1dc      	bne.n	8001d22 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <HAL_RCC_OscConfig+0x7a0>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d80:	431a      	orrs	r2, r3
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	0449      	lsls	r1, r1, #17
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff f933 	bl	8001000 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff f92e 	bl	8001000 <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e045      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	049b      	lsls	r3, r3, #18
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x6f4>
 8001dbe:	e03d      	b.n	8001e3c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001dc6:	4922      	ldr	r1, [pc, #136]	; (8001e50 <HAL_RCC_OscConfig+0x7a4>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f918 	bl	8001000 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff f913 	bl	8001000 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e02a      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	049b      	lsls	r3, r3, #18
 8001df0:	4013      	ands	r3, r2
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x72a>
 8001df4:	e022      	b.n	8001e3c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e01d      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_RCC_OscConfig+0x79c>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	025b      	lsls	r3, r3, #9
 8001e0e:	401a      	ands	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10f      	bne.n	8001e38 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	23f0      	movs	r3, #240	; 0xf0
 8001e1c:	039b      	lsls	r3, r3, #14
 8001e1e:	401a      	ands	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	23c0      	movs	r3, #192	; 0xc0
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b00a      	add	sp, #40	; 0x28
 8001e44:	bdb0      	pop	{r4, r5, r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	ff02ffff 	.word	0xff02ffff
 8001e50:	feffffff 	.word	0xfeffffff

08001e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e128      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b96      	ldr	r3, [pc, #600]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d91e      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b93      	ldr	r3, [pc, #588]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4b90      	ldr	r3, [pc, #576]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e88:	f7ff f8ba 	bl	8001000 <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e92:	f7ff f8b5 	bl	8001000 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a8a      	ldr	r2, [pc, #552]	; (80020c8 <HAL_RCC_ClockConfig+0x274>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e109      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebe:	4b83      	ldr	r3, [pc, #524]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	22f0      	movs	r2, #240	; 0xf0
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d100      	bne.n	8001ede <HAL_RCC_ClockConfig+0x8a>
 8001edc:	e089      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee6:	4b79      	ldr	r3, [pc, #484]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d120      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0e1      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001efe:	4b73      	ldr	r3, [pc, #460]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	049b      	lsls	r3, r3, #18
 8001f06:	4013      	ands	r3, r2
 8001f08:	d114      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0d5      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f16:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d109      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0ca      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f24:	4b69      	ldr	r3, [pc, #420]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0c2      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f34:	4b65      	ldr	r3, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	4b62      	ldr	r3, [pc, #392]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff f85a 	bl	8001000 <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5a:	f7ff f851 	bl	8001000 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x274>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0a5      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f6e:	4b57      	ldr	r3, [pc, #348]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	220c      	movs	r2, #12
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d1ef      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x106>
 8001f7a:	e03a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d111      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	e009      	b.n	8001f9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f86:	f7ff f83b 	bl	8001000 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x274>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e08f      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d1ef      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x132>
 8001fa6:	e024      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d11b      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb2:	f7ff f825 	bl	8001000 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a42      	ldr	r2, [pc, #264]	; (80020c8 <HAL_RCC_ClockConfig+0x274>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e079      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	220c      	movs	r2, #12
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d1ef      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0x15e>
 8001fd2:	e00e      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f814 	bl	8001000 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	4a3a      	ldr	r2, [pc, #232]	; (80020c8 <HAL_RCC_ClockConfig+0x274>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e068      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fe8:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	220c      	movs	r2, #12
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d21e      	bcs.n	800203e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002000:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4393      	bics	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002012:	f7fe fff5 	bl	8001000 <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	e009      	b.n	8002030 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7fe fff0 	bl	8001000 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_RCC_ClockConfig+0x274>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e044      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d1ee      	bne.n	800201c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2204      	movs	r2, #4
 8002044:	4013      	ands	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_RCC_ClockConfig+0x27c>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8002058:	430a      	orrs	r2, r1
 800205a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	4013      	ands	r3, r2
 8002064:	d00a      	beq.n	800207c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_RCC_ClockConfig+0x280>)
 800206c:	4013      	ands	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	00da      	lsls	r2, r3, #3
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207c:	f000 f832 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8002080:	0001      	movs	r1, r0
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	220f      	movs	r2, #15
 800208a:	4013      	ands	r3, r2
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_RCC_ClockConfig+0x284>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	000a      	movs	r2, r1
 8002092:	40da      	lsrs	r2, r3
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_RCC_ClockConfig+0x288>)
 8002096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_RCC_ClockConfig+0x28c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	250b      	movs	r5, #11
 800209e:	197c      	adds	r4, r7, r5
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7fe ff67 	bl	8000f74 <HAL_InitTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80020aa:	197b      	adds	r3, r7, r5
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80020b2:	197b      	adds	r3, r7, r5
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	e000      	b.n	80020ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40022000 	.word	0x40022000
 80020c8:	00001388 	.word	0x00001388
 80020cc:	40021000 	.word	0x40021000
 80020d0:	fffff8ff 	.word	0xfffff8ff
 80020d4:	ffffc7ff 	.word	0xffffc7ff
 80020d8:	08004198 	.word	0x08004198
 80020dc:	20000050 	.word	0x20000050
 80020e0:	20000054 	.word	0x20000054

080020e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b08e      	sub	sp, #56	; 0x38
 80020e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80020ea:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_GetSysClockFreq+0x138>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f2:	230c      	movs	r3, #12
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d014      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x40>
 80020fa:	d900      	bls.n	80020fe <HAL_RCC_GetSysClockFreq+0x1a>
 80020fc:	e07b      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x112>
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x24>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d00b      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x3a>
 8002106:	e076      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002108:	4b44      	ldr	r3, [pc, #272]	; (800221c <HAL_RCC_GetSysClockFreq+0x138>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2210      	movs	r2, #16
 800210e:	4013      	ands	r3, r2
 8002110:	d002      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002112:	4b43      	ldr	r3, [pc, #268]	; (8002220 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002116:	e07c      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_RCC_GetSysClockFreq+0x140>)
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800211c:	e079      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800211e:	4b42      	ldr	r3, [pc, #264]	; (8002228 <HAL_RCC_GetSysClockFreq+0x144>)
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002122:	e076      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	0c9a      	lsrs	r2, r3, #18
 8002128:	230f      	movs	r3, #15
 800212a:	401a      	ands	r2, r3
 800212c:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCC_GetSysClockFreq+0x148>)
 800212e:	5c9b      	ldrb	r3, [r3, r2]
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	0d9a      	lsrs	r2, r3, #22
 8002136:	2303      	movs	r3, #3
 8002138:	4013      	ands	r3, r2
 800213a:	3301      	adds	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_RCC_GetSysClockFreq+0x138>)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	4013      	ands	r3, r2
 8002148:	d01a      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	4a35      	ldr	r2, [pc, #212]	; (8002228 <HAL_RCC_GetSysClockFreq+0x144>)
 8002154:	2300      	movs	r3, #0
 8002156:	69b8      	ldr	r0, [r7, #24]
 8002158:	69f9      	ldr	r1, [r7, #28]
 800215a:	f7fe f881 	bl	8000260 <__aeabi_lmul>
 800215e:	0002      	movs	r2, r0
 8002160:	000b      	movs	r3, r1
 8002162:	0010      	movs	r0, r2
 8002164:	0019      	movs	r1, r3
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f7fe f855 	bl	8000220 <__aeabi_uldivmod>
 8002176:	0002      	movs	r2, r0
 8002178:	000b      	movs	r3, r1
 800217a:	0013      	movs	r3, r2
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
 800217e:	e037      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002180:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_RCC_GetSysClockFreq+0x138>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4013      	ands	r3, r2
 8002188:	d01a      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4a23      	ldr	r2, [pc, #140]	; (8002220 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002194:	2300      	movs	r3, #0
 8002196:	68b8      	ldr	r0, [r7, #8]
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	f7fe f861 	bl	8000260 <__aeabi_lmul>
 800219e:	0002      	movs	r2, r0
 80021a0:	000b      	movs	r3, r1
 80021a2:	0010      	movs	r0, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f7fe f835 	bl	8000220 <__aeabi_uldivmod>
 80021b6:	0002      	movs	r2, r0
 80021b8:	000b      	movs	r3, r1
 80021ba:	0013      	movs	r3, r2
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
 80021be:	e017      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	0018      	movs	r0, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	0019      	movs	r1, r3
 80021c8:	4a16      	ldr	r2, [pc, #88]	; (8002224 <HAL_RCC_GetSysClockFreq+0x140>)
 80021ca:	2300      	movs	r3, #0
 80021cc:	f7fe f848 	bl	8000260 <__aeabi_lmul>
 80021d0:	0002      	movs	r2, r0
 80021d2:	000b      	movs	r3, r1
 80021d4:	0010      	movs	r0, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	001c      	movs	r4, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	001d      	movs	r5, r3
 80021e0:	0022      	movs	r2, r4
 80021e2:	002b      	movs	r3, r5
 80021e4:	f7fe f81c 	bl	8000220 <__aeabi_uldivmod>
 80021e8:	0002      	movs	r2, r0
 80021ea:	000b      	movs	r3, r1
 80021ec:	0013      	movs	r3, r2
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021f4:	e00d      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_GetSysClockFreq+0x138>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0b5b      	lsrs	r3, r3, #13
 80021fc:	2207      	movs	r2, #7
 80021fe:	4013      	ands	r3, r2
 8002200:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	3301      	adds	r3, #1
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	0212      	lsls	r2, r2, #8
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002210:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b00e      	add	sp, #56	; 0x38
 800221a:	bdb0      	pop	{r4, r5, r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	003d0900 	.word	0x003d0900
 8002224:	00f42400 	.word	0x00f42400
 8002228:	007a1200 	.word	0x007a1200
 800222c:	080041b0 	.word	0x080041b0

08002230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <HAL_RCC_GetHCLKFreq+0x10>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	20000050 	.word	0x20000050

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002248:	f7ff fff2 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 800224c:	0001      	movs	r1, r0
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	2207      	movs	r2, #7
 8002256:	4013      	ands	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_RCC_GetPCLK1Freq+0x28>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	40d9      	lsrs	r1, r3
 800225e:	000b      	movs	r3, r1
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	40021000 	.word	0x40021000
 800226c:	080041a8 	.word	0x080041a8

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffdc 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002278:	0001      	movs	r1, r0
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	0adb      	lsrs	r3, r3, #11
 8002280:	2207      	movs	r2, #7
 8002282:	4013      	ands	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	40d9      	lsrs	r1, r3
 800228a:	000b      	movs	r3, r1
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	40021000 	.word	0x40021000
 8002298:	080041a8 	.word	0x080041a8

0800229c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80022a4:	2017      	movs	r0, #23
 80022a6:	183b      	adds	r3, r7, r0
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2220      	movs	r2, #32
 80022b2:	4013      	ands	r3, r2
 80022b4:	d100      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80022b6:	e0c7      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b8:	4b9b      	ldr	r3, [pc, #620]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	055b      	lsls	r3, r3, #21
 80022c0:	4013      	ands	r3, r2
 80022c2:	d109      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b98      	ldr	r3, [pc, #608]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c8:	4b97      	ldr	r3, [pc, #604]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	0549      	lsls	r1, r1, #21
 80022ce:	430a      	orrs	r2, r1
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022d2:	183b      	adds	r3, r7, r0
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b94      	ldr	r3, [pc, #592]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d11a      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e4:	4b91      	ldr	r3, [pc, #580]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b90      	ldr	r3, [pc, #576]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0049      	lsls	r1, r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fe85 	bl	8001000 <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	e008      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fc:	f7fe fe80 	bl	8001000 <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e107      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b87      	ldr	r3, [pc, #540]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d0f0      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800231a:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	23c0      	movs	r3, #192	; 0xc0
 8002320:	039b      	lsls	r3, r3, #14
 8002322:	4013      	ands	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	039b      	lsls	r3, r3, #14
 800232e:	4013      	ands	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d013      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	23c0      	movs	r3, #192	; 0xc0
 800233c:	029b      	lsls	r3, r3, #10
 800233e:	401a      	ands	r2, r3
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	429a      	cmp	r2, r3
 8002346:	d10a      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002348:	4b77      	ldr	r3, [pc, #476]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	401a      	ands	r2, r3
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	029b      	lsls	r3, r3, #10
 8002356:	429a      	cmp	r2, r3
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0df      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800235e:	4b72      	ldr	r3, [pc, #456]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002362:	23c0      	movs	r3, #192	; 0xc0
 8002364:	029b      	lsls	r3, r3, #10
 8002366:	4013      	ands	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d03b      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	23c0      	movs	r3, #192	; 0xc0
 8002376:	029b      	lsls	r3, r3, #10
 8002378:	4013      	ands	r3, r2
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d033      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2220      	movs	r2, #32
 8002386:	4013      	ands	r3, r2
 8002388:	d02e      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800238c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238e:	4a68      	ldr	r2, [pc, #416]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002398:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	0309      	lsls	r1, r1, #12
 800239e:	430a      	orrs	r2, r1
 80023a0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023a2:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a6:	4b60      	ldr	r3, [pc, #384]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023a8:	4962      	ldr	r1, [pc, #392]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80023ae:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	d014      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fe1f 	bl	8001000 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c6:	e009      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7fe fe1a 	bl	8001000 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	4a59      	ldr	r2, [pc, #356]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0a0      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023dc:	4b52      	ldr	r3, [pc, #328]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4013      	ands	r3, r2
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2220      	movs	r2, #32
 80023ee:	4013      	ands	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	23c0      	movs	r3, #192	; 0xc0
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	401a      	ands	r2, r3
 80023fc:	23c0      	movs	r3, #192	; 0xc0
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	429a      	cmp	r2, r3
 8002402:	d10c      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002404:	4b48      	ldr	r3, [pc, #288]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4c      	ldr	r2, [pc, #304]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	23c0      	movs	r3, #192	; 0xc0
 8002414:	039b      	lsls	r3, r3, #14
 8002416:	401a      	ands	r2, r3
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002420:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	23c0      	movs	r3, #192	; 0xc0
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	401a      	ands	r2, r3
 800242c:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800242e:	430a      	orrs	r2, r1
 8002430:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002432:	2317      	movs	r3, #23
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800243e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002442:	493f      	ldr	r1, [pc, #252]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002444:	400a      	ands	r2, r1
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002452:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	2203      	movs	r2, #3
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	4b31      	ldr	r3, [pc, #196]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002462:	430a      	orrs	r2, r1
 8002464:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	220c      	movs	r2, #12
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002480:	430a      	orrs	r2, r1
 8002482:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	4a2c      	ldr	r2, [pc, #176]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2208      	movs	r2, #8
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	4a25      	ldr	r2, [pc, #148]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	4a17      	ldr	r2, [pc, #92]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	4013      	ands	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a17      	ldr	r2, [pc, #92]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024fa:	430a      	orrs	r2, r1
 80024fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	4013      	ands	r3, r2
 8002506:	d009      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002518:	430a      	orrs	r2, r1
 800251a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b006      	add	sp, #24
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	fffcffff 	.word	0xfffcffff
 8002534:	fff7ffff 	.word	0xfff7ffff
 8002538:	00001388 	.word	0x00001388
 800253c:	ffcfffff 	.word	0xffcfffff
 8002540:	efffffff 	.word	0xefffffff
 8002544:	fffff3ff 	.word	0xfffff3ff
 8002548:	ffffcfff 	.word	0xffffcfff
 800254c:	fbffffff 	.word	0xfbffffff
 8002550:	fff3ffff 	.word	0xfff3ffff

08002554 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800255c:	230f      	movs	r3, #15
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e088      	b.n	8002680 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2221      	movs	r2, #33	; 0x21
 8002572:	5c9b      	ldrb	r3, [r3, r2]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	2100      	movs	r1, #0
 8002580:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	0018      	movs	r0, r3
 8002586:	f7fe f9b5 	bl	80008f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	2102      	movs	r1, #2
 8002590:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2210      	movs	r2, #16
 800259a:	4013      	ands	r3, r2
 800259c:	2b10      	cmp	r3, #16
 800259e:	d05f      	beq.n	8002660 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	22ca      	movs	r2, #202	; 0xca
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2253      	movs	r2, #83	; 0x53
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80025b0:	250f      	movs	r5, #15
 80025b2:	197c      	adds	r4, r7, r5
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fb86 	bl	8002cc8 <RTC_EnterInitMode>
 80025bc:	0003      	movs	r3, r0
 80025be:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80025c0:	0028      	movs	r0, r5
 80025c2:	183b      	adds	r3, r7, r0
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d12c      	bne.n	8002624 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	492c      	ldr	r1, [pc, #176]	; (8002688 <HAL_RTC_Init+0x134>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68d2      	ldr	r2, [r2, #12]
 8002600:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6919      	ldr	r1, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002616:	183c      	adds	r4, r7, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fb98 	bl	8002d50 <RTC_ExitInitMode>
 8002620:	0003      	movs	r3, r0
 8002622:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002624:	230f      	movs	r3, #15
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2103      	movs	r1, #3
 800263a:	438a      	bics	r2, r1
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
 800265e:	e003      	b.n	8002668 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002660:	230f      	movs	r3, #15
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002668:	230f      	movs	r3, #15
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2221      	movs	r2, #33	; 0x21
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800267a:	230f      	movs	r3, #15
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	781b      	ldrb	r3, [r3, #0]
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	ff8fffbf 	.word	0xff8fffbf

0800268c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	5c9b      	ldrb	r3, [r3, r2]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_RTC_SetTime+0x1e>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e092      	b.n	80027d0 <HAL_RTC_SetTime+0x144>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2221      	movs	r2, #33	; 0x21
 80026b6:	2102      	movs	r1, #2
 80026b8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d125      	bne.n	800270c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	4013      	ands	r3, r2
 80026ca:	d102      	bne.n	80026d2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 fb64 	bl	8002da4 <RTC_ByteToBcd2>
 80026dc:	0003      	movs	r3, r0
 80026de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 fb5d 	bl	8002da4 <RTC_ByteToBcd2>
 80026ea:	0003      	movs	r3, r0
 80026ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	789b      	ldrb	r3, [r3, #2]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 fb55 	bl	8002da4 <RTC_ByteToBcd2>
 80026fa:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026fc:	0022      	movs	r2, r4
 80026fe:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e017      	b.n	800273c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	4013      	ands	r3, r2
 8002716:	d102      	bne.n	800271e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800272a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002730:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	78db      	ldrb	r3, [r3, #3]
 8002736:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	22ca      	movs	r2, #202	; 0xca
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2253      	movs	r2, #83	; 0x53
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800274c:	2513      	movs	r5, #19
 800274e:	197c      	adds	r4, r7, r5
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0018      	movs	r0, r3
 8002754:	f000 fab8 	bl	8002cc8 <RTC_EnterInitMode>
 8002758:	0003      	movs	r3, r0
 800275a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800275c:	0028      	movs	r0, r5
 800275e:	183b      	adds	r3, r7, r0
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d120      	bne.n	80027a8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	491a      	ldr	r1, [pc, #104]	; (80027d8 <HAL_RTC_SetTime+0x14c>)
 800276e:	400a      	ands	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4917      	ldr	r1, [pc, #92]	; (80027dc <HAL_RTC_SetTime+0x150>)
 800277e:	400a      	ands	r2, r1
 8002780:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800279a:	183c      	adds	r4, r7, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 fad6 	bl	8002d50 <RTC_ExitInitMode>
 80027a4:	0003      	movs	r3, r0
 80027a6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80027a8:	2313      	movs	r3, #19
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]

  return status;
 80027ca:	2313      	movs	r3, #19
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b006      	add	sp, #24
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}
 80027d8:	007f7f7f 	.word	0x007f7f7f
 80027dc:	fffbffff 	.word	0xfffbffff

080027e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	5c9b      	ldrb	r3, [r3, r2]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_RTC_SetDate+0x1e>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e07e      	b.n	80028fc <HAL_RTC_SetDate+0x11c>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2221      	movs	r2, #33	; 0x21
 800280a:	2102      	movs	r1, #2
 800280c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10e      	bne.n	8002832 <HAL_RTC_SetDate+0x52>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	001a      	movs	r2, r3
 800281a:	2310      	movs	r3, #16
 800281c:	4013      	ands	r3, r2
 800281e:	d008      	beq.n	8002832 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2210      	movs	r2, #16
 8002826:	4393      	bics	r3, r2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	330a      	adds	r3, #10
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11c      	bne.n	8002872 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	78db      	ldrb	r3, [r3, #3]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fab1 	bl	8002da4 <RTC_ByteToBcd2>
 8002842:	0003      	movs	r3, r0
 8002844:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	785b      	ldrb	r3, [r3, #1]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 faaa 	bl	8002da4 <RTC_ByteToBcd2>
 8002850:	0003      	movs	r3, r0
 8002852:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002854:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	789b      	ldrb	r3, [r3, #2]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 faa2 	bl	8002da4 <RTC_ByteToBcd2>
 8002860:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002862:	0022      	movs	r2, r4
 8002864:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00e      	b.n	8002890 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	78db      	ldrb	r3, [r3, #3]
 8002876:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800287e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002884:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	22ca      	movs	r2, #202	; 0xca
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2253      	movs	r2, #83	; 0x53
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80028a0:	2513      	movs	r5, #19
 80028a2:	197c      	adds	r4, r7, r5
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 fa0e 	bl	8002cc8 <RTC_EnterInitMode>
 80028ac:	0003      	movs	r3, r0
 80028ae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80028b0:	0028      	movs	r0, r5
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4910      	ldr	r1, [pc, #64]	; (8002904 <HAL_RTC_SetDate+0x124>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028c6:	183c      	adds	r4, r7, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 fa40 	bl	8002d50 <RTC_ExitInitMode>
 80028d0:	0003      	movs	r3, r0
 80028d2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80028d4:	2313      	movs	r3, #19
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2221      	movs	r2, #33	; 0x21
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	22ff      	movs	r2, #255	; 0xff
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

  return status;
 80028f6:	2313      	movs	r3, #19
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	781b      	ldrb	r3, [r3, #0]
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b006      	add	sp, #24
 8002902:	bdb0      	pop	{r4, r5, r7, pc}
 8002904:	00ffff3f 	.word	0x00ffff3f

08002908 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002914:	4ba7      	ldr	r3, [pc, #668]	; (8002bb4 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	22fa      	movs	r2, #250	; 0xfa
 800291a:	01d1      	lsls	r1, r2, #7
 800291c:	0018      	movs	r0, r3
 800291e:	f7fd fbf3 	bl	8000108 <__udivsi3>
 8002922:	0003      	movs	r3, r0
 8002924:	001a      	movs	r2, r3
 8002926:	0013      	movs	r3, r2
 8002928:	015b      	lsls	r3, r3, #5
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	189b      	adds	r3, r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_RTC_SetAlarm_IT+0x42>
 8002946:	2302      	movs	r3, #2
 8002948:	e130      	b.n	8002bac <HAL_RTC_SetAlarm_IT+0x2a4>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2221      	movs	r2, #33	; 0x21
 8002956:	2102      	movs	r1, #2
 8002958:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d136      	bne.n	80029ce <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2240      	movs	r2, #64	; 0x40
 8002968:	4013      	ands	r3, r2
 800296a:	d102      	bne.n	8002972 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fa14 	bl	8002da4 <RTC_ByteToBcd2>
 800297c:	0003      	movs	r3, r0
 800297e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 fa0d 	bl	8002da4 <RTC_ByteToBcd2>
 800298a:	0003      	movs	r3, r0
 800298c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800298e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	789b      	ldrb	r3, [r3, #2]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fa05 	bl	8002da4 <RTC_ByteToBcd2>
 800299a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800299c:	0022      	movs	r2, r4
 800299e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	78db      	ldrb	r3, [r3, #3]
 80029a4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80029a6:	431a      	orrs	r2, r3
 80029a8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2220      	movs	r2, #32
 80029ae:	5c9b      	ldrb	r3, [r3, r2]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 f9f7 	bl	8002da4 <RTC_ByteToBcd2>
 80029b6:	0003      	movs	r3, r0
 80029b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80029ba:	0022      	movs	r2, r4
 80029bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80029c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e022      	b.n	8002a14 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	4013      	ands	r3, r2
 80029d8:	d102      	bne.n	80029e0 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80029ec:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80029f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	78db      	ldrb	r3, [r3, #3]
 80029f8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80029fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2120      	movs	r1, #32
 8002a00:	5c5b      	ldrb	r3, [r3, r1]
 8002a02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002a04:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002a0a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	22ca      	movs	r2, #202	; 0xca
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2253      	movs	r2, #83	; 0x53
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d146      	bne.n	8002aca <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	495c      	ldr	r1, [pc, #368]	; (8002bb8 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	22ff      	movs	r2, #255	; 0xff
 8002a54:	401a      	ands	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4958      	ldr	r1, [pc, #352]	; (8002bbc <HAL_RTC_SetAlarm_IT+0x2b4>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2221      	movs	r2, #33	; 0x21
 8002a78:	2103      	movs	r1, #3
 8002a7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e091      	b.n	8002bac <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	d0e5      	beq.n	8002a60 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	0049      	lsls	r1, r1, #1
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0149      	lsls	r1, r1, #5
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	e055      	b.n	8002b76 <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	493a      	ldr	r1, [pc, #232]	; (8002bc0 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4936      	ldr	r1, [pc, #216]	; (8002bc4 <HAL_RTC_SetAlarm_IT+0x2bc>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	22fa      	movs	r2, #250	; 0xfa
 8002af4:	01d1      	lsls	r1, r2, #7
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fd fb06 	bl	8000108 <__udivsi3>
 8002afc:	0003      	movs	r3, r0
 8002afe:	001a      	movs	r2, r3
 8002b00:	0013      	movs	r3, r2
 8002b02:	015b      	lsls	r3, r3, #5
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	189b      	adds	r3, r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	22ff      	movs	r2, #255	; 0xff
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2221      	movs	r2, #33	; 0x21
 8002b26:	2103      	movs	r1, #3
 8002b28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e03a      	b.n	8002bac <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d0e5      	beq.n	8002b0e <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0089      	lsls	r1, r1, #2
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	0189      	lsls	r1, r1, #6
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0289      	lsls	r1, r1, #10
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	0289      	lsls	r1, r1, #10
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2221      	movs	r2, #33	; 0x21
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b009      	add	sp, #36	; 0x24
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	20000050 	.word	0x20000050
 8002bb8:	fffffeff 	.word	0xfffffeff
 8002bbc:	fffffe7f 	.word	0xfffffe7f
 8002bc0:	fffffdff 	.word	0xfffffdff
 8002bc4:	fffffd7f 	.word	0xfffffd7f
 8002bc8:	40010400 	.word	0x40010400

08002bcc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002bd4:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_RTC_AlarmIRQHandler+0x90>)
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	0292      	lsls	r2, r2, #10
 8002bda:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	015b      	lsls	r3, r3, #5
 8002be6:	4013      	ands	r3, r2
 8002be8:	d014      	beq.n	8002c14 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4916      	ldr	r1, [pc, #88]	; (8002c60 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f82a 	bl	8002c68 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d014      	beq.n	8002c4c <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	401a      	ands	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4909      	ldr	r1, [pc, #36]	; (8002c64 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f8cd 	bl	8002de6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2221      	movs	r2, #33	; 0x21
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	fffffe7f 	.word	0xfffffe7f
 8002c64:	fffffd7f 	.word	0xfffffd7f

08002c68 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <HAL_RTC_WaitForSynchro+0x4c>)
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c8c:	f7fe f9b8 	bl	8001000 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c94:	e00a      	b.n	8002cac <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c96:	f7fe f9b3 	bl	8001000 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	23fa      	movs	r3, #250	; 0xfa
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d901      	bls.n	8002cac <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e006      	b.n	8002cba <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d0ee      	beq.n	8002c96 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	0001ff5f 	.word	0x0001ff5f

08002cc8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d12c      	bne.n	8002d42 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe f982 	bl	8001000 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d00:	e014      	b.n	8002d2c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d02:	f7fe f97d 	bl	8001000 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1ad2      	subs	r2, r2, r3
 8002d0c:	200f      	movs	r0, #15
 8002d0e:	183b      	adds	r3, r7, r0
 8002d10:	1839      	adds	r1, r7, r0
 8002d12:	7809      	ldrb	r1, [r1, #0]
 8002d14:	7019      	strb	r1, [r3, #0]
 8002d16:	23fa      	movs	r3, #250	; 0xfa
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d906      	bls.n	8002d2c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2221      	movs	r2, #33	; 0x21
 8002d22:	2104      	movs	r1, #4
 8002d24:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002d26:	183b      	adds	r3, r7, r0
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	4013      	ands	r3, r2
 8002d36:	d104      	bne.n	8002d42 <RTC_EnterInitMode+0x7a>
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d1df      	bne.n	8002d02 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	781b      	ldrb	r3, [r3, #0]
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	240f      	movs	r4, #15
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2220      	movs	r2, #32
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d10c      	bne.n	8002d96 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7ff ff7a 	bl	8002c78 <HAL_RTC_WaitForSynchro>
 8002d84:	1e03      	subs	r3, r0, #0
 8002d86:	d006      	beq.n	8002d96 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2221      	movs	r2, #33	; 0x21
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002d90:	193b      	adds	r3, r7, r4
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002d96:	230f      	movs	r3, #15
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b005      	add	sp, #20
 8002da2:	bd90      	pop	{r4, r7, pc}

08002da4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	0002      	movs	r2, r0
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002db4:	e007      	b.n	8002dc6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	1dfa      	adds	r2, r7, #7
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	3a0a      	subs	r2, #10
 8002dc4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b09      	cmp	r3, #9
 8002dcc:	d8f3      	bhi.n	8002db6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	b2db      	uxtb	r3, r3
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b004      	add	sp, #16
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e083      	b.n	8002f12 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	2382      	movs	r3, #130	; 0x82
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d009      	beq.n	8002e32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	61da      	str	r2, [r3, #28]
 8002e24:	e005      	b.n	8002e32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2251      	movs	r2, #81	; 0x51
 8002e3c:	5c9b      	ldrb	r3, [r3, r2]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2250      	movs	r2, #80	; 0x50
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fd fda8 	bl	80009a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2251      	movs	r2, #81	; 0x51
 8002e58:	2102      	movs	r1, #2
 8002e5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2140      	movs	r1, #64	; 0x40
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	2382      	movs	r3, #130	; 0x82
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	401a      	ands	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6899      	ldr	r1, [r3, #8]
 8002e7a:	2384      	movs	r3, #132	; 0x84
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	400b      	ands	r3, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68d9      	ldr	r1, [r3, #12]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	400b      	ands	r3, r1
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2102      	movs	r1, #2
 8002e94:	400b      	ands	r3, r1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	400b      	ands	r3, r1
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2138      	movs	r1, #56	; 0x38
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	0011      	movs	r1, r2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	019b      	lsls	r3, r3, #6
 8002ecc:	401a      	ands	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	2204      	movs	r2, #4
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	401a      	ands	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <HAL_SPI_Init+0x124>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2251      	movs	r2, #81	; 0x51
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b002      	add	sp, #8
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	fffff7ff 	.word	0xfffff7ff

08002f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e044      	b.n	8002fbc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2278      	movs	r2, #120	; 0x78
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7fd feaf 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2224      	movs	r2, #36	; 0x24
 8002f4e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 fbce 	bl	8003704 <UART_SetConfig>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e024      	b.n	8002fbc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 fe5f 	bl	8003c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	490d      	ldr	r1, [pc, #52]	; (8002fc4 <HAL_UART_Init+0xa4>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	212a      	movs	r1, #42	; 0x2a
 8002f9e:	438a      	bics	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fef7 	bl	8003da8 <UART_CheckIdleState>
 8002fba:	0003      	movs	r3, r0
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	ffffb7ff 	.word	0xffffb7ff

08002fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d000      	beq.n	8002fe2 <HAL_UART_Transmit+0x1a>
 8002fe0:	e08c      	b.n	80030fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_UART_Transmit+0x28>
 8002fe8:	1dbb      	adds	r3, r7, #6
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e084      	b.n	80030fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d109      	bne.n	8003014 <HAL_UART_Transmit+0x4c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d001      	beq.n	8003014 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e074      	b.n	80030fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2284      	movs	r2, #132	; 0x84
 8003018:	2100      	movs	r1, #0
 800301a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2221      	movs	r2, #33	; 0x21
 8003020:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fd ffed 	bl	8001000 <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1dba      	adds	r2, r7, #6
 800302e:	2150      	movs	r1, #80	; 0x50
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1dba      	adds	r2, r7, #6
 8003038:	2152      	movs	r1, #82	; 0x52
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	015b      	lsls	r3, r3, #5
 8003046:	429a      	cmp	r2, r3
 8003048:	d108      	bne.n	800305c <HAL_UART_Transmit+0x94>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	e003      	b.n	8003064 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003064:	e02f      	b.n	80030c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	0013      	movs	r3, r2
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	f000 ff40 	bl	8003ef8 <UART_WaitOnFlagUntilTimeout>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d004      	beq.n	8003086 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e03b      	b.n	80030fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	001a      	movs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	05d2      	lsls	r2, r2, #23
 8003098:	0dd2      	lsrs	r2, r2, #23
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	3302      	adds	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e007      	b.n	80030b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2252      	movs	r2, #82	; 0x52
 80030b8:	5a9b      	ldrh	r3, [r3, r2]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b299      	uxth	r1, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2252      	movs	r2, #82	; 0x52
 80030c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2252      	movs	r2, #82	; 0x52
 80030ca:	5a9b      	ldrh	r3, [r3, r2]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1c9      	bne.n	8003066 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	0013      	movs	r3, r2
 80030dc:	2200      	movs	r2, #0
 80030de:	2140      	movs	r1, #64	; 0x40
 80030e0:	f000 ff0a 	bl	8003ef8 <UART_WaitOnFlagUntilTimeout>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d004      	beq.n	80030f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e005      	b.n	80030fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b008      	add	sp, #32
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b0ab      	sub	sp, #172	; 0xac
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	22a4      	movs	r2, #164	; 0xa4
 8003118:	18b9      	adds	r1, r7, r2
 800311a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	20a0      	movs	r0, #160	; 0xa0
 8003124:	1839      	adds	r1, r7, r0
 8003126:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	219c      	movs	r1, #156	; 0x9c
 8003130:	1879      	adds	r1, r7, r1
 8003132:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003134:	0011      	movs	r1, r2
 8003136:	18bb      	adds	r3, r7, r2
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a99      	ldr	r2, [pc, #612]	; (80033a0 <HAL_UART_IRQHandler+0x298>)
 800313c:	4013      	ands	r3, r2
 800313e:	2298      	movs	r2, #152	; 0x98
 8003140:	18bc      	adds	r4, r7, r2
 8003142:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003144:	18bb      	adds	r3, r7, r2
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d114      	bne.n	8003176 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800314c:	187b      	adds	r3, r7, r1
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2220      	movs	r2, #32
 8003152:	4013      	ands	r3, r2
 8003154:	d00f      	beq.n	8003176 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003156:	183b      	adds	r3, r7, r0
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2220      	movs	r2, #32
 800315c:	4013      	ands	r3, r2
 800315e:	d00a      	beq.n	8003176 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003164:	2b00      	cmp	r3, #0
 8003166:	d100      	bne.n	800316a <HAL_UART_IRQHandler+0x62>
 8003168:	e2a0      	b.n	80036ac <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	0010      	movs	r0, r2
 8003172:	4798      	blx	r3
      }
      return;
 8003174:	e29a      	b.n	80036ac <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003176:	2398      	movs	r3, #152	; 0x98
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d100      	bne.n	8003182 <HAL_UART_IRQHandler+0x7a>
 8003180:	e114      	b.n	80033ac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003182:	239c      	movs	r3, #156	; 0x9c
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	d106      	bne.n	800319c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800318e:	23a0      	movs	r3, #160	; 0xa0
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a83      	ldr	r2, [pc, #524]	; (80033a4 <HAL_UART_IRQHandler+0x29c>)
 8003196:	4013      	ands	r3, r2
 8003198:	d100      	bne.n	800319c <HAL_UART_IRQHandler+0x94>
 800319a:	e107      	b.n	80033ac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800319c:	23a4      	movs	r3, #164	; 0xa4
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	d012      	beq.n	80031ce <HAL_UART_IRQHandler+0xc6>
 80031a8:	23a0      	movs	r3, #160	; 0xa0
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	d00b      	beq.n	80031ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2284      	movs	r2, #132	; 0x84
 80031c2:	589b      	ldr	r3, [r3, r2]
 80031c4:	2201      	movs	r2, #1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2184      	movs	r1, #132	; 0x84
 80031cc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ce:	23a4      	movs	r3, #164	; 0xa4
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d011      	beq.n	80031fe <HAL_UART_IRQHandler+0xf6>
 80031da:	239c      	movs	r3, #156	; 0x9c
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	d00b      	beq.n	80031fe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2202      	movs	r2, #2
 80031ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2284      	movs	r2, #132	; 0x84
 80031f2:	589b      	ldr	r3, [r3, r2]
 80031f4:	2204      	movs	r2, #4
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2184      	movs	r1, #132	; 0x84
 80031fc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031fe:	23a4      	movs	r3, #164	; 0xa4
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2204      	movs	r2, #4
 8003206:	4013      	ands	r3, r2
 8003208:	d011      	beq.n	800322e <HAL_UART_IRQHandler+0x126>
 800320a:	239c      	movs	r3, #156	; 0x9c
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
 8003214:	d00b      	beq.n	800322e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2204      	movs	r2, #4
 800321c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2284      	movs	r2, #132	; 0x84
 8003222:	589b      	ldr	r3, [r3, r2]
 8003224:	2202      	movs	r2, #2
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2184      	movs	r1, #132	; 0x84
 800322c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800322e:	23a4      	movs	r3, #164	; 0xa4
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2208      	movs	r2, #8
 8003236:	4013      	ands	r3, r2
 8003238:	d017      	beq.n	800326a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800323a:	23a0      	movs	r3, #160	; 0xa0
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2220      	movs	r2, #32
 8003242:	4013      	ands	r3, r2
 8003244:	d105      	bne.n	8003252 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003246:	239c      	movs	r3, #156	; 0x9c
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2208      	movs	r2, #8
 8003258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2284      	movs	r2, #132	; 0x84
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	2208      	movs	r2, #8
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2184      	movs	r1, #132	; 0x84
 8003268:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800326a:	23a4      	movs	r3, #164	; 0xa4
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	4013      	ands	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_UART_IRQHandler+0x198>
 8003278:	23a0      	movs	r3, #160	; 0xa0
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	04db      	lsls	r3, r3, #19
 8003282:	4013      	ands	r3, r2
 8003284:	d00c      	beq.n	80032a0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2284      	movs	r2, #132	; 0x84
 8003294:	589b      	ldr	r3, [r3, r2]
 8003296:	2220      	movs	r2, #32
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2184      	movs	r1, #132	; 0x84
 800329e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2284      	movs	r2, #132	; 0x84
 80032a4:	589b      	ldr	r3, [r3, r2]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d100      	bne.n	80032ac <HAL_UART_IRQHandler+0x1a4>
 80032aa:	e201      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ac:	23a4      	movs	r3, #164	; 0xa4
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2220      	movs	r2, #32
 80032b4:	4013      	ands	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032b8:	23a0      	movs	r3, #160	; 0xa0
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2220      	movs	r2, #32
 80032c0:	4013      	ands	r3, r2
 80032c2:	d008      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	0010      	movs	r0, r2
 80032d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2284      	movs	r2, #132	; 0x84
 80032da:	589b      	ldr	r3, [r3, r2]
 80032dc:	2194      	movs	r1, #148	; 0x94
 80032de:	187a      	adds	r2, r7, r1
 80032e0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d004      	beq.n	80032fa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2228      	movs	r2, #40	; 0x28
 80032f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032f8:	d047      	beq.n	800338a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 fe65 	bl	8003fcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2240      	movs	r2, #64	; 0x40
 800330a:	4013      	ands	r3, r2
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d137      	bne.n	8003380 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003318:	2090      	movs	r0, #144	; 0x90
 800331a:	183a      	adds	r2, r7, r0
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	2301      	movs	r3, #1
 8003320:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	183b      	adds	r3, r7, r0
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <HAL_UART_IRQHandler+0x2a0>)
 8003356:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	0018      	movs	r0, r3
 800335e:	f7fd ff9b 	bl	8001298 <HAL_DMA_Abort_IT>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d01a      	beq.n	800339c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	0018      	movs	r0, r3
 8003372:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003374:	e012      	b.n	800339c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f9af 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337e:	e00d      	b.n	800339c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f9aa 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e008      	b.n	800339c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f9a5 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2284      	movs	r2, #132	; 0x84
 8003396:	2100      	movs	r1, #0
 8003398:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800339a:	e189      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	46c0      	nop			; (mov r8, r8)
    return;
 800339e:	e187      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a8>
 80033a0:	0000080f 	.word	0x0000080f
 80033a4:	04000120 	.word	0x04000120
 80033a8:	08004095 	.word	0x08004095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d000      	beq.n	80033b6 <HAL_UART_IRQHandler+0x2ae>
 80033b4:	e13b      	b.n	800362e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033b6:	23a4      	movs	r3, #164	; 0xa4
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2210      	movs	r2, #16
 80033be:	4013      	ands	r3, r2
 80033c0:	d100      	bne.n	80033c4 <HAL_UART_IRQHandler+0x2bc>
 80033c2:	e134      	b.n	800362e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033c4:	23a0      	movs	r3, #160	; 0xa0
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2210      	movs	r2, #16
 80033cc:	4013      	ands	r3, r2
 80033ce:	d100      	bne.n	80033d2 <HAL_UART_IRQHandler+0x2ca>
 80033d0:	e12d      	b.n	800362e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2210      	movs	r2, #16
 80033d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d000      	beq.n	80033ea <HAL_UART_IRQHandler+0x2e2>
 80033e8:	e0a1      	b.n	800352e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	217e      	movs	r1, #126	; 0x7e
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <HAL_UART_IRQHandler+0x2fa>
 8003400:	e158      	b.n	80036b4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2258      	movs	r2, #88	; 0x58
 8003406:	5a9b      	ldrh	r3, [r3, r2]
 8003408:	187a      	adds	r2, r7, r1
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d300      	bcc.n	8003412 <HAL_UART_IRQHandler+0x30a>
 8003410:	e150      	b.n	80036b4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	187a      	adds	r2, r7, r1
 8003416:	215a      	movs	r1, #90	; 0x5a
 8003418:	8812      	ldrh	r2, [r2, #0]
 800341a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2220      	movs	r2, #32
 8003426:	4013      	ands	r3, r2
 8003428:	d16f      	bne.n	800350a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003432:	67bb      	str	r3, [r7, #120]	; 0x78
 8003434:	2301      	movs	r3, #1
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	499e      	ldr	r1, [pc, #632]	; (80036c4 <HAL_UART_IRQHandler+0x5bc>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
 8003466:	2301      	movs	r3, #1
 8003468:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	438a      	bics	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003494:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003496:	673b      	str	r3, [r7, #112]	; 0x70
 8003498:	2301      	movs	r3, #1
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349e:	f383 8810 	msr	PRIMASK, r3
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2140      	movs	r1, #64	; 0x40
 80034b0:	438a      	bics	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ba:	f383 8810 	msr	PRIMASK, r3
}
 80034be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	2120      	movs	r1, #32
 80034c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80034d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d8:	2301      	movs	r3, #1
 80034da:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2110      	movs	r1, #16
 80034f0:	438a      	bics	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd fe87 	bl	8001218 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2258      	movs	r2, #88	; 0x58
 8003514:	5a9a      	ldrh	r2, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	215a      	movs	r1, #90	; 0x5a
 800351a:	5a5b      	ldrh	r3, [r3, r1]
 800351c:	b29b      	uxth	r3, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0011      	movs	r1, r2
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f8e0 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800352c:	e0c2      	b.n	80036b4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2258      	movs	r2, #88	; 0x58
 8003532:	5a99      	ldrh	r1, [r3, r2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	225a      	movs	r2, #90	; 0x5a
 8003538:	5a9b      	ldrh	r3, [r3, r2]
 800353a:	b29a      	uxth	r2, r3
 800353c:	208e      	movs	r0, #142	; 0x8e
 800353e:	183b      	adds	r3, r7, r0
 8003540:	1a8a      	subs	r2, r1, r2
 8003542:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	225a      	movs	r2, #90	; 0x5a
 8003548:	5a9b      	ldrh	r3, [r3, r2]
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d100      	bne.n	8003552 <HAL_UART_IRQHandler+0x44a>
 8003550:	e0b2      	b.n	80036b8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003552:	183b      	adds	r3, r7, r0
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d100      	bne.n	800355c <HAL_UART_IRQHandler+0x454>
 800355a:	e0ad      	b.n	80036b8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355c:	f3ef 8310 	mrs	r3, PRIMASK
 8003560:	60fb      	str	r3, [r7, #12]
  return(result);
 8003562:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003564:	2488      	movs	r4, #136	; 0x88
 8003566:	193a      	adds	r2, r7, r4
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	2301      	movs	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4951      	ldr	r1, [pc, #324]	; (80036c8 <HAL_UART_IRQHandler+0x5c0>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	193b      	adds	r3, r7, r4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003594:	f3ef 8310 	mrs	r3, PRIMASK
 8003598:	61bb      	str	r3, [r7, #24]
  return(result);
 800359a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	2484      	movs	r4, #132	; 0x84
 800359e:	193a      	adds	r2, r7, r4
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	438a      	bics	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	2120      	movs	r1, #32
 80035d2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e0:	f3ef 8310 	mrs	r3, PRIMASK
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	2480      	movs	r4, #128	; 0x80
 80035ea:	193a      	adds	r2, r7, r4
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	2301      	movs	r3, #1
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2110      	movs	r1, #16
 8003606:	438a      	bics	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	193b      	adds	r3, r7, r4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361e:	183b      	adds	r3, r7, r0
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f860 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800362c:	e044      	b.n	80036b8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362e:	23a4      	movs	r3, #164	; 0xa4
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	035b      	lsls	r3, r3, #13
 8003638:	4013      	ands	r3, r2
 800363a:	d010      	beq.n	800365e <HAL_UART_IRQHandler+0x556>
 800363c:	239c      	movs	r3, #156	; 0x9c
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	03db      	lsls	r3, r3, #15
 8003646:	4013      	ands	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2280      	movs	r2, #128	; 0x80
 8003650:	0352      	lsls	r2, r2, #13
 8003652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 fd5e 	bl	8004118 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800365c:	e02f      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800365e:	23a4      	movs	r3, #164	; 0xa4
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	4013      	ands	r3, r2
 8003668:	d00f      	beq.n	800368a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800366a:	23a0      	movs	r3, #160	; 0xa0
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	4013      	ands	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01e      	beq.n	80036bc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	0010      	movs	r0, r2
 8003686:	4798      	blx	r3
    }
    return;
 8003688:	e018      	b.n	80036bc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800368a:	23a4      	movs	r3, #164	; 0xa4
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2240      	movs	r2, #64	; 0x40
 8003692:	4013      	ands	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_UART_IRQHandler+0x5b6>
 8003696:	23a0      	movs	r3, #160	; 0xa0
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2240      	movs	r2, #64	; 0x40
 800369e:	4013      	ands	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fd0c 	bl	80040c2 <UART_EndTransmit_IT>
    return;
 80036aa:	e008      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
      return;
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	e006      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
    return;
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	e004      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
      return;
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	e002      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
      return;
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	e000      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
    return;
 80036bc:	46c0      	nop			; (mov r8, r8)
  }

}
 80036be:	46bd      	mov	sp, r7
 80036c0:	b02b      	add	sp, #172	; 0xac
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	fffffeff 	.word	0xfffffeff
 80036c8:	fffffedf 	.word	0xfffffedf

080036cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	000a      	movs	r2, r1
 80036f6:	1cbb      	adds	r3, r7, #2
 80036f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af00      	add	r7, sp, #0
 800370a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800370c:	231a      	movs	r3, #26
 800370e:	2218      	movs	r2, #24
 8003710:	189b      	adds	r3, r3, r2
 8003712:	19db      	adds	r3, r3, r7
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	431a      	orrs	r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4313      	orrs	r3, r2
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4ac3      	ldr	r2, [pc, #780]	; (8003a44 <UART_SetConfig+0x340>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4abe      	ldr	r2, [pc, #760]	; (8003a48 <UART_SetConfig+0x344>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4ab8      	ldr	r2, [pc, #736]	; (8003a4c <UART_SetConfig+0x348>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003774:	4313      	orrs	r3, r2
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4ab4      	ldr	r2, [pc, #720]	; (8003a50 <UART_SetConfig+0x34c>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4ab0      	ldr	r2, [pc, #704]	; (8003a54 <UART_SetConfig+0x350>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d131      	bne.n	80037fc <UART_SetConfig+0xf8>
 8003798:	4baf      	ldr	r3, [pc, #700]	; (8003a58 <UART_SetConfig+0x354>)
 800379a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379c:	2203      	movs	r2, #3
 800379e:	4013      	ands	r3, r2
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d01d      	beq.n	80037e0 <UART_SetConfig+0xdc>
 80037a4:	d823      	bhi.n	80037ee <UART_SetConfig+0xea>
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d00c      	beq.n	80037c4 <UART_SetConfig+0xc0>
 80037aa:	d820      	bhi.n	80037ee <UART_SetConfig+0xea>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <UART_SetConfig+0xb2>
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d00e      	beq.n	80037d2 <UART_SetConfig+0xce>
 80037b4:	e01b      	b.n	80037ee <UART_SetConfig+0xea>
 80037b6:	231b      	movs	r3, #27
 80037b8:	2218      	movs	r2, #24
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	19db      	adds	r3, r3, r7
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e0b4      	b.n	800392e <UART_SetConfig+0x22a>
 80037c4:	231b      	movs	r3, #27
 80037c6:	2218      	movs	r2, #24
 80037c8:	189b      	adds	r3, r3, r2
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	2202      	movs	r2, #2
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e0ad      	b.n	800392e <UART_SetConfig+0x22a>
 80037d2:	231b      	movs	r3, #27
 80037d4:	2218      	movs	r2, #24
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	2204      	movs	r2, #4
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e0a6      	b.n	800392e <UART_SetConfig+0x22a>
 80037e0:	231b      	movs	r3, #27
 80037e2:	2218      	movs	r2, #24
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	2208      	movs	r2, #8
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e09f      	b.n	800392e <UART_SetConfig+0x22a>
 80037ee:	231b      	movs	r3, #27
 80037f0:	2218      	movs	r2, #24
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	19db      	adds	r3, r3, r7
 80037f6:	2210      	movs	r2, #16
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e098      	b.n	800392e <UART_SetConfig+0x22a>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a96      	ldr	r2, [pc, #600]	; (8003a5c <UART_SetConfig+0x358>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d131      	bne.n	800386a <UART_SetConfig+0x166>
 8003806:	4b94      	ldr	r3, [pc, #592]	; (8003a58 <UART_SetConfig+0x354>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	220c      	movs	r2, #12
 800380c:	4013      	ands	r3, r2
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d01d      	beq.n	800384e <UART_SetConfig+0x14a>
 8003812:	d823      	bhi.n	800385c <UART_SetConfig+0x158>
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00c      	beq.n	8003832 <UART_SetConfig+0x12e>
 8003818:	d820      	bhi.n	800385c <UART_SetConfig+0x158>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <UART_SetConfig+0x120>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00e      	beq.n	8003840 <UART_SetConfig+0x13c>
 8003822:	e01b      	b.n	800385c <UART_SetConfig+0x158>
 8003824:	231b      	movs	r3, #27
 8003826:	2218      	movs	r2, #24
 8003828:	189b      	adds	r3, r3, r2
 800382a:	19db      	adds	r3, r3, r7
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e07d      	b.n	800392e <UART_SetConfig+0x22a>
 8003832:	231b      	movs	r3, #27
 8003834:	2218      	movs	r2, #24
 8003836:	189b      	adds	r3, r3, r2
 8003838:	19db      	adds	r3, r3, r7
 800383a:	2202      	movs	r2, #2
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e076      	b.n	800392e <UART_SetConfig+0x22a>
 8003840:	231b      	movs	r3, #27
 8003842:	2218      	movs	r2, #24
 8003844:	189b      	adds	r3, r3, r2
 8003846:	19db      	adds	r3, r3, r7
 8003848:	2204      	movs	r2, #4
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e06f      	b.n	800392e <UART_SetConfig+0x22a>
 800384e:	231b      	movs	r3, #27
 8003850:	2218      	movs	r2, #24
 8003852:	189b      	adds	r3, r3, r2
 8003854:	19db      	adds	r3, r3, r7
 8003856:	2208      	movs	r2, #8
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e068      	b.n	800392e <UART_SetConfig+0x22a>
 800385c:	231b      	movs	r3, #27
 800385e:	2218      	movs	r2, #24
 8003860:	189b      	adds	r3, r3, r2
 8003862:	19db      	adds	r3, r3, r7
 8003864:	2210      	movs	r2, #16
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e061      	b.n	800392e <UART_SetConfig+0x22a>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a7c      	ldr	r2, [pc, #496]	; (8003a60 <UART_SetConfig+0x35c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d106      	bne.n	8003882 <UART_SetConfig+0x17e>
 8003874:	231b      	movs	r3, #27
 8003876:	2218      	movs	r2, #24
 8003878:	189b      	adds	r3, r3, r2
 800387a:	19db      	adds	r3, r3, r7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e055      	b.n	800392e <UART_SetConfig+0x22a>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a77      	ldr	r2, [pc, #476]	; (8003a64 <UART_SetConfig+0x360>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d106      	bne.n	800389a <UART_SetConfig+0x196>
 800388c:	231b      	movs	r3, #27
 800388e:	2218      	movs	r2, #24
 8003890:	189b      	adds	r3, r3, r2
 8003892:	19db      	adds	r3, r3, r7
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e049      	b.n	800392e <UART_SetConfig+0x22a>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6b      	ldr	r2, [pc, #428]	; (8003a4c <UART_SetConfig+0x348>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d13e      	bne.n	8003922 <UART_SetConfig+0x21e>
 80038a4:	4b6c      	ldr	r3, [pc, #432]	; (8003a58 <UART_SetConfig+0x354>)
 80038a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038a8:	23c0      	movs	r3, #192	; 0xc0
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	4013      	ands	r3, r2
 80038ae:	22c0      	movs	r2, #192	; 0xc0
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <UART_SetConfig+0x202>
 80038b6:	22c0      	movs	r2, #192	; 0xc0
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d82a      	bhi.n	8003914 <UART_SetConfig+0x210>
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d011      	beq.n	80038ea <UART_SetConfig+0x1e6>
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d822      	bhi.n	8003914 <UART_SetConfig+0x210>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <UART_SetConfig+0x1d8>
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	00d2      	lsls	r2, r2, #3
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <UART_SetConfig+0x1f4>
 80038da:	e01b      	b.n	8003914 <UART_SetConfig+0x210>
 80038dc:	231b      	movs	r3, #27
 80038de:	2218      	movs	r2, #24
 80038e0:	189b      	adds	r3, r3, r2
 80038e2:	19db      	adds	r3, r3, r7
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e021      	b.n	800392e <UART_SetConfig+0x22a>
 80038ea:	231b      	movs	r3, #27
 80038ec:	2218      	movs	r2, #24
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	19db      	adds	r3, r3, r7
 80038f2:	2202      	movs	r2, #2
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e01a      	b.n	800392e <UART_SetConfig+0x22a>
 80038f8:	231b      	movs	r3, #27
 80038fa:	2218      	movs	r2, #24
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	19db      	adds	r3, r3, r7
 8003900:	2204      	movs	r2, #4
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e013      	b.n	800392e <UART_SetConfig+0x22a>
 8003906:	231b      	movs	r3, #27
 8003908:	2218      	movs	r2, #24
 800390a:	189b      	adds	r3, r3, r2
 800390c:	19db      	adds	r3, r3, r7
 800390e:	2208      	movs	r2, #8
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e00c      	b.n	800392e <UART_SetConfig+0x22a>
 8003914:	231b      	movs	r3, #27
 8003916:	2218      	movs	r2, #24
 8003918:	189b      	adds	r3, r3, r2
 800391a:	19db      	adds	r3, r3, r7
 800391c:	2210      	movs	r2, #16
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e005      	b.n	800392e <UART_SetConfig+0x22a>
 8003922:	231b      	movs	r3, #27
 8003924:	2218      	movs	r2, #24
 8003926:	189b      	adds	r3, r3, r2
 8003928:	19db      	adds	r3, r3, r7
 800392a:	2210      	movs	r2, #16
 800392c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <UART_SetConfig+0x348>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d000      	beq.n	800393a <UART_SetConfig+0x236>
 8003938:	e09a      	b.n	8003a70 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800393a:	231b      	movs	r3, #27
 800393c:	2218      	movs	r2, #24
 800393e:	189b      	adds	r3, r3, r2
 8003940:	19db      	adds	r3, r3, r7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d01d      	beq.n	8003984 <UART_SetConfig+0x280>
 8003948:	dc20      	bgt.n	800398c <UART_SetConfig+0x288>
 800394a:	2b04      	cmp	r3, #4
 800394c:	d015      	beq.n	800397a <UART_SetConfig+0x276>
 800394e:	dc1d      	bgt.n	800398c <UART_SetConfig+0x288>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <UART_SetConfig+0x256>
 8003954:	2b02      	cmp	r3, #2
 8003956:	d005      	beq.n	8003964 <UART_SetConfig+0x260>
 8003958:	e018      	b.n	800398c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395a:	f7fe fc73 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 800395e:	0003      	movs	r3, r0
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003962:	e01c      	b.n	800399e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003964:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <UART_SetConfig+0x354>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	4013      	ands	r3, r2
 800396c:	d002      	beq.n	8003974 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <UART_SetConfig+0x364>)
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003972:	e014      	b.n	800399e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003974:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <UART_SetConfig+0x368>)
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003978:	e011      	b.n	800399e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7fe fbb3 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 800397e:	0003      	movs	r3, r0
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003982:	e00c      	b.n	800399e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800398a:	e008      	b.n	800399e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003990:	231a      	movs	r3, #26
 8003992:	2218      	movs	r2, #24
 8003994:	189b      	adds	r3, r3, r2
 8003996:	19db      	adds	r3, r3, r7
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
        break;
 800399c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d100      	bne.n	80039a6 <UART_SetConfig+0x2a2>
 80039a4:	e133      	b.n	8003c0e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	0013      	movs	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d305      	bcc.n	80039c2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039be:	429a      	cmp	r2, r3
 80039c0:	d906      	bls.n	80039d0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80039c2:	231a      	movs	r3, #26
 80039c4:	2218      	movs	r2, #24
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	19db      	adds	r3, r3, r7
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e11e      	b.n	8003c0e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	6939      	ldr	r1, [r7, #16]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	000b      	movs	r3, r1
 80039de:	0e1b      	lsrs	r3, r3, #24
 80039e0:	0010      	movs	r0, r2
 80039e2:	0205      	lsls	r5, r0, #8
 80039e4:	431d      	orrs	r5, r3
 80039e6:	000b      	movs	r3, r1
 80039e8:	021c      	lsls	r4, r3, #8
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68b8      	ldr	r0, [r7, #8]
 80039f8:	68f9      	ldr	r1, [r7, #12]
 80039fa:	1900      	adds	r0, r0, r4
 80039fc:	4169      	adcs	r1, r5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	2300      	movs	r3, #0
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f7fc fc08 	bl	8000220 <__aeabi_uldivmod>
 8003a10:	0002      	movs	r2, r0
 8003a12:	000b      	movs	r3, r1
 8003a14:	0013      	movs	r3, r2
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1a:	23c0      	movs	r3, #192	; 0xc0
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d309      	bcc.n	8003a36 <UART_SetConfig+0x332>
 8003a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	035b      	lsls	r3, r3, #13
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d204      	bcs.n	8003a36 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	e0eb      	b.n	8003c0e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003a36:	231a      	movs	r3, #26
 8003a38:	2218      	movs	r2, #24
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	19db      	adds	r3, r3, r7
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e0e4      	b.n	8003c0e <UART_SetConfig+0x50a>
 8003a44:	efff69f3 	.word	0xefff69f3
 8003a48:	ffffcfff 	.word	0xffffcfff
 8003a4c:	40004800 	.word	0x40004800
 8003a50:	fffff4ff 	.word	0xfffff4ff
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40004400 	.word	0x40004400
 8003a60:	40004c00 	.word	0x40004c00
 8003a64:	40005000 	.word	0x40005000
 8003a68:	003d0900 	.word	0x003d0900
 8003a6c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d000      	beq.n	8003a7e <UART_SetConfig+0x37a>
 8003a7c:	e070      	b.n	8003b60 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003a7e:	231b      	movs	r3, #27
 8003a80:	2218      	movs	r2, #24
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	19db      	adds	r3, r3, r7
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d822      	bhi.n	8003ad2 <UART_SetConfig+0x3ce>
 8003a8c:	009a      	lsls	r2, r3, #2
 8003a8e:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <UART_SetConfig+0x528>)
 8003a90:	18d3      	adds	r3, r2, r3
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a96:	f7fe fbd5 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a9e:	e021      	b.n	8003ae4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7fe fbe6 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003aa8:	e01c      	b.n	8003ae4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <UART_SetConfig+0x52c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2210      	movs	r2, #16
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d002      	beq.n	8003aba <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ab4:	4b5f      	ldr	r3, [pc, #380]	; (8003c34 <UART_SetConfig+0x530>)
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ab8:	e014      	b.n	8003ae4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003aba:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <UART_SetConfig+0x534>)
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003abe:	e011      	b.n	8003ae4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac0:	f7fe fb10 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ac8:	e00c      	b.n	8003ae4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ad0:	e008      	b.n	8003ae4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003ad6:	231a      	movs	r3, #26
 8003ad8:	2218      	movs	r2, #24
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	19db      	adds	r3, r3, r7
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
        break;
 8003ae2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d100      	bne.n	8003aec <UART_SetConfig+0x3e8>
 8003aea:	e090      	b.n	8003c0e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	005a      	lsls	r2, r3, #1
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	18d2      	adds	r2, r2, r3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0019      	movs	r1, r3
 8003afe:	0010      	movs	r0, r2
 8003b00:	f7fc fb02 	bl	8000108 <__udivsi3>
 8003b04:	0003      	movs	r3, r0
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d921      	bls.n	8003b52 <UART_SetConfig+0x44e>
 8003b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	025b      	lsls	r3, r3, #9
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d21c      	bcs.n	8003b52 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	200e      	movs	r0, #14
 8003b1e:	2418      	movs	r4, #24
 8003b20:	1903      	adds	r3, r0, r4
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	210f      	movs	r1, #15
 8003b26:	438a      	bics	r2, r1
 8003b28:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2207      	movs	r2, #7
 8003b32:	4013      	ands	r3, r2
 8003b34:	b299      	uxth	r1, r3
 8003b36:	1903      	adds	r3, r0, r4
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	1902      	adds	r2, r0, r4
 8003b3c:	19d2      	adds	r2, r2, r7
 8003b3e:	8812      	ldrh	r2, [r2, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1902      	adds	r2, r0, r4
 8003b4a:	19d2      	adds	r2, r2, r7
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	e05d      	b.n	8003c0e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b52:	231a      	movs	r3, #26
 8003b54:	2218      	movs	r2, #24
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	19db      	adds	r3, r3, r7
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e056      	b.n	8003c0e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b60:	231b      	movs	r3, #27
 8003b62:	2218      	movs	r2, #24
 8003b64:	189b      	adds	r3, r3, r2
 8003b66:	19db      	adds	r3, r3, r7
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d822      	bhi.n	8003bb4 <UART_SetConfig+0x4b0>
 8003b6e:	009a      	lsls	r2, r3, #2
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <UART_SetConfig+0x538>)
 8003b72:	18d3      	adds	r3, r2, r3
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7fe fb64 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b80:	e021      	b.n	8003bc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b82:	f7fe fb75 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8003b86:	0003      	movs	r3, r0
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b8a:	e01c      	b.n	8003bc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <UART_SetConfig+0x52c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2210      	movs	r2, #16
 8003b92:	4013      	ands	r3, r2
 8003b94:	d002      	beq.n	8003b9c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <UART_SetConfig+0x530>)
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b9a:	e014      	b.n	8003bc6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <UART_SetConfig+0x534>)
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ba0:	e011      	b.n	8003bc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7fe fa9f 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003baa:	e00c      	b.n	8003bc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bb2:	e008      	b.n	8003bc6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003bb8:	231a      	movs	r3, #26
 8003bba:	2218      	movs	r2, #24
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	19db      	adds	r3, r3, r7
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
        break;
 8003bc4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	085a      	lsrs	r2, r3, #1
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	18d2      	adds	r2, r2, r3
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	0019      	movs	r1, r3
 8003bdc:	0010      	movs	r0, r2
 8003bde:	f7fc fa93 	bl	8000108 <__udivsi3>
 8003be2:	0003      	movs	r3, r0
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b0f      	cmp	r3, #15
 8003bea:	d90a      	bls.n	8003c02 <UART_SetConfig+0x4fe>
 8003bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	025b      	lsls	r3, r3, #9
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d205      	bcs.n	8003c02 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	e005      	b.n	8003c0e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c02:	231a      	movs	r3, #26
 8003c04:	2218      	movs	r2, #24
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	19db      	adds	r3, r3, r7
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2200      	movs	r2, #0
 8003c12:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2200      	movs	r2, #0
 8003c18:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c1a:	231a      	movs	r3, #26
 8003c1c:	2218      	movs	r2, #24
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	781b      	ldrb	r3, [r3, #0]
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b00e      	add	sp, #56	; 0x38
 8003c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2c:	080041bc 	.word	0x080041bc
 8003c30:	40021000 	.word	0x40021000
 8003c34:	003d0900 	.word	0x003d0900
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	080041e0 	.word	0x080041e0

08003c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a4a      	ldr	r2, [pc, #296]	; (8003d84 <UART_AdvFeatureConfig+0x144>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <UART_AdvFeatureConfig+0x148>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	2204      	movs	r2, #4
 8003c92:	4013      	ands	r3, r2
 8003c94:	d00b      	beq.n	8003cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <UART_AdvFeatureConfig+0x14c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <UART_AdvFeatureConfig+0x150>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <UART_AdvFeatureConfig+0x154>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <UART_AdvFeatureConfig+0x158>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2240      	movs	r2, #64	; 0x40
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <UART_AdvFeatureConfig+0x15c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	035b      	lsls	r3, r3, #13
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d10b      	bne.n	8003d5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <UART_AdvFeatureConfig+0x160>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	4013      	ands	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <UART_AdvFeatureConfig+0x164>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fffdffff 	.word	0xfffdffff
 8003d88:	fffeffff 	.word	0xfffeffff
 8003d8c:	fffbffff 	.word	0xfffbffff
 8003d90:	ffff7fff 	.word	0xffff7fff
 8003d94:	ffffefff 	.word	0xffffefff
 8003d98:	ffffdfff 	.word	0xffffdfff
 8003d9c:	ffefffff 	.word	0xffefffff
 8003da0:	ff9fffff 	.word	0xff9fffff
 8003da4:	fff7ffff 	.word	0xfff7ffff

08003da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b092      	sub	sp, #72	; 0x48
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2284      	movs	r2, #132	; 0x84
 8003db4:	2100      	movs	r1, #0
 8003db6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003db8:	f7fd f922 	bl	8001000 <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d12c      	bne.n	8003e28 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	0391      	lsls	r1, r2, #14
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <UART_CheckIdleState+0x148>)
 8003dd8:	9200      	str	r2, [sp, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f000 f88c 	bl	8003ef8 <UART_WaitOnFlagUntilTimeout>
 8003de0:	1e03      	subs	r3, r0, #0
 8003de2:	d021      	beq.n	8003e28 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de4:	f3ef 8310 	mrs	r3, PRIMASK
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dee:	2301      	movs	r3, #1
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	438a      	bics	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2278      	movs	r2, #120	; 0x78
 8003e20:	2100      	movs	r1, #0
 8003e22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e05f      	b.n	8003ee8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d146      	bne.n	8003ec4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	03d1      	lsls	r1, r2, #15
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <UART_CheckIdleState+0x148>)
 8003e40:	9200      	str	r2, [sp, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f000 f858 	bl	8003ef8 <UART_WaitOnFlagUntilTimeout>
 8003e48:	1e03      	subs	r3, r0, #0
 8003e4a:	d03b      	beq.n	8003ec4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e52:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
 8003e56:	2301      	movs	r3, #1
 8003e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f383 8810 	msr	PRIMASK, r3
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4921      	ldr	r1, [pc, #132]	; (8003ef4 <UART_CheckIdleState+0x14c>)
 8003e6e:	400a      	ands	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f383 8810 	msr	PRIMASK, r3
}
 8003e7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e82:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e84:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f383 8810 	msr	PRIMASK, r3
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f383 8810 	msr	PRIMASK, r3
}
 8003eae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2280      	movs	r2, #128	; 0x80
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2278      	movs	r2, #120	; 0x78
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e011      	b.n	8003ee8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2280      	movs	r2, #128	; 0x80
 8003ece:	2120      	movs	r1, #32
 8003ed0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2278      	movs	r2, #120	; 0x78
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b010      	add	sp, #64	; 0x40
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	01ffffff 	.word	0x01ffffff
 8003ef4:	fffffedf 	.word	0xfffffedf

08003ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f08:	e04b      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	d048      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fd f876 	bl	8001000 <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04b      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2204      	movs	r2, #4
 8003f32:	4013      	ands	r3, r2
 8003f34:	d035      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d111      	bne.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 f83c 	bl	8003fcc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2284      	movs	r2, #132	; 0x84
 8003f58:	2108      	movs	r1, #8
 8003f5a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2278      	movs	r2, #120	; 0x78
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e02c      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	401a      	ands	r2, r3
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d112      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 f81f 	bl	8003fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2284      	movs	r2, #132	; 0x84
 8003f92:	2120      	movs	r1, #32
 8003f94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2278      	movs	r2, #120	; 0x78
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e00f      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	425a      	negs	r2, r3
 8003fb2:	4153      	adcs	r3, r2
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	1dfb      	adds	r3, r7, #7
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d0a4      	beq.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b004      	add	sp, #16
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08e      	sub	sp, #56	; 0x38
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd8:	617b      	str	r3, [r7, #20]
  return(result);
 8003fda:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4926      	ldr	r1, [pc, #152]	; (8004090 <UART_EndRxTransfer+0xc4>)
 8003ff6:	400a      	ands	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f383 8810 	msr	PRIMASK, r3
}
 8004004:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004006:	f3ef 8310 	mrs	r3, PRIMASK
 800400a:	623b      	str	r3, [r7, #32]
  return(result);
 800400c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
 8004010:	2301      	movs	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2101      	movs	r1, #1
 8004028:	438a      	bics	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	f383 8810 	msr	PRIMASK, r3
}
 8004036:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	2b01      	cmp	r3, #1
 800403e:	d118      	bne.n	8004072 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	60bb      	str	r3, [r7, #8]
  return(result);
 8004046:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404a:	2301      	movs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2110      	movs	r1, #16
 8004062:	438a      	bics	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	2120      	movs	r1, #32
 8004078:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b00e      	add	sp, #56	; 0x38
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	fffffedf 	.word	0xfffffedf

08004094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	225a      	movs	r2, #90	; 0x5a
 80040a6:	2100      	movs	r1, #0
 80040a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2252      	movs	r2, #82	; 0x52
 80040ae:	2100      	movs	r1, #0
 80040b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7ff fb11 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80040d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	2301      	movs	r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2140      	movs	r1, #64	; 0x40
 80040ec:	438a      	bics	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f7ff fade 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b006      	add	sp, #24
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}

08004128 <memset>:
 8004128:	0003      	movs	r3, r0
 800412a:	1882      	adds	r2, r0, r2
 800412c:	4293      	cmp	r3, r2
 800412e:	d100      	bne.n	8004132 <memset+0xa>
 8004130:	4770      	bx	lr
 8004132:	7019      	strb	r1, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	e7f9      	b.n	800412c <memset+0x4>

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	2600      	movs	r6, #0
 800413c:	4c0c      	ldr	r4, [pc, #48]	; (8004170 <__libc_init_array+0x38>)
 800413e:	4d0d      	ldr	r5, [pc, #52]	; (8004174 <__libc_init_array+0x3c>)
 8004140:	1b64      	subs	r4, r4, r5
 8004142:	10a4      	asrs	r4, r4, #2
 8004144:	42a6      	cmp	r6, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	2600      	movs	r6, #0
 800414a:	f000 f819 	bl	8004180 <_init>
 800414e:	4c0a      	ldr	r4, [pc, #40]	; (8004178 <__libc_init_array+0x40>)
 8004150:	4d0a      	ldr	r5, [pc, #40]	; (800417c <__libc_init_array+0x44>)
 8004152:	1b64      	subs	r4, r4, r5
 8004154:	10a4      	asrs	r4, r4, #2
 8004156:	42a6      	cmp	r6, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	00b3      	lsls	r3, r6, #2
 800415e:	58eb      	ldr	r3, [r5, r3]
 8004160:	4798      	blx	r3
 8004162:	3601      	adds	r6, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	00b3      	lsls	r3, r6, #2
 8004168:	58eb      	ldr	r3, [r5, r3]
 800416a:	4798      	blx	r3
 800416c:	3601      	adds	r6, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	0800420c 	.word	0x0800420c
 8004174:	0800420c 	.word	0x0800420c
 8004178:	08004210 	.word	0x08004210
 800417c:	0800420c 	.word	0x0800420c

08004180 <_init>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr

0800418c <_fini>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	469e      	mov	lr, r3
 8004196:	4770      	bx	lr
